/code/contracts/spoke/SpokeYieldVault.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.24;
   3 |     | 
   4 |     | import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
   5 |     | import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
   6 |     | import {AccessControlUpgradeable} from "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
   7 |     | import {PausableUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
   8 |     | import {ReentrancyGuardUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol";
   9 |     | import {ERC4626Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol";
  10 |     | import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";
  11 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
  12 |     | import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
  13 |     | import {SuperchainERC20} from "../tokens/SuperchainERC20.sol";
  14 |     | import {AdapterRegistry} from "../strategy/AdapterRegistry.sol";
  15 |     | 
  16 |     | /// @dev Minimal interface to query adapter TVL for cap enforcement.
  17 |     | interface IAdapterLike {
  18 |     |     function totalAssets() external view returns (uint256);
  19 |     | }
  20 |     | 
  21 |     | /// @title SpokeYieldVault
  22 |     | /// @notice ERC4626 vault on spokes; mints/burns LST shares token; integrates adapters.
  23 | *   | contract SpokeYieldVault is
  24 |     |     Initializable,
  25 |     |     UUPSUpgradeable,
  26 |     |     AccessControlUpgradeable,
  27 |     |     PausableUpgradeable,
  28 |     |     ReentrancyGuardUpgradeable,
  29 |     |     ERC4626Upgradeable
  30 |     | {
  31 |     |     using SafeERC20 for IERC20;
  32 |     | 
  33 |     |     // Roles
  34 | *   |     bytes32 public constant GOVERNOR_ROLE = keccak256("GOVERNOR_ROLE");
  35 | *   |     bytes32 public constant REBALANCER_ROLE = keccak256("REBALANCER_ROLE");
  36 | *   |     bytes32 public constant HUB_ROLE = keccak256("HUB_ROLE");
  37 |     |     bytes32 public constant CONTROLLER_ROLE = keccak256("CONTROLLER_ROLE");
  38 |     | 
  39 |     |     // Feature flags
  40 |     |     bool public depositsEnabled;
  41 |     |     bool public borrowsEnabled;
  42 |     |     bool public bridgeEnabled;
  43 |     | 
  44 |     |     // Storage
  45 |     |     address public hub;
  46 |     |     SuperchainERC20 public lst;
  47 |     |     AdapterRegistry public adapterRegistry;
  48 |     | 
  49 |     |     // Fees / buffers (example: performance fee in bps)
  50 |     |     uint16 public performanceFeeBps; // 0-10000
  51 |     |     address public feeRecipient;
  52 |     |     uint16 public withdrawalBufferBps; // 0-10000 portion of TVL to serve locally
  53 |     | 
  54 |     |     // Events
  55 |     |     event AdapterAllocated(address indexed adapter, address indexed asset, uint256 assets);
  56 |     |     event AdapterDeallocated(address indexed adapter, address indexed asset, uint256 assets);
  57 |     |     event Harvest(address indexed adapter, address indexed asset, uint256 yieldAmount);
  58 |     |     event LstMinted(address indexed user, uint256 shares, address indexed lst);
  59 |     |     event LstBurned(address indexed user, uint256 shares, address indexed lst);
  60 |     |     event RemoteCreditHandled(
  61 |     |         address indexed user, address indexed asset, uint256 assets, uint256 shares, uint256 nonce, bytes32 actionId
  62 |     |     );
  63 |     |     event RemoteLiquidityServed(address indexed toUser, address indexed asset, uint256 assets, bytes32 actionId);
  64 |     |     event BorrowPayout(address indexed to, address indexed asset, uint256 amount, bytes32 actionId, uint256 ts);
  65 |     |     event SharesSeized(address indexed user, address indexed to, uint256 shares, bytes32 actionId);
  66 |     |     event FlagsUpdated(bool depositsEnabled, bool borrowsEnabled, bool bridgeEnabled);
  67 |     |     event StateChanged(uint8 previous, uint8 current);
  68 |     |     // Withdraw queue events (for harness/integration testing)
  69 |     |     event WithdrawQueued(address indexed user, uint256 indexed claimId, uint256 shares, uint256 ts);
  70 |     |     event WithdrawFulfilled(
  71 |     |         address indexed user, uint256 indexed claimId, uint256 assets, bytes32 actionId, uint256 ts
  72 |     |     );
  73 |     | 
  74 |     |     // Errors
  75 |     |     error DepositsDisabled();
  76 |     |     error BorrowsDisabled();
  77 |     |     error BridgeDisabled();
  78 |     |     error NotAllowedAdapter();
  79 |     |     error CapExceeded();
  80 |     |     error NonceUsed(bytes32);
  81 |     |     error InsufficientBuffer();
  82 |     |     error DuplicateClaim();
  83 |     |     error InvalidArray();
  84 |     |     error BadState();
  85 |     | 
  86 |     |     // Nonce replay protection for inbound messages
  87 |     |     mapping(bytes32 => bool) private _usedNonce;
  88 |     | 
  89 |     |     // --- Lightweight withdraw queue (testing harness support) ---
  90 |     |     struct Claim {
  91 |     |         address user;
  92 |     |         uint128 shares;
  93 |     |         uint128 filledAssets;
  94 |     |         bool active;
  95 |     |         uint64 ts;
  96 |     |     }
  97 |     | 
  98 |     |     mapping(uint256 => Claim) public claims; // claimId => Claim
  99 |     |     // Unique claim nonces to avoid same-block collisions when hashing IDs
 100 |     |     uint256 private _claimNonce;
 101 |     |     // Per-epoch outflow cap
 102 |     |     uint16 public epochOutflowCapBps; // cap in bps applied to TVL per epoch
 103 |     |     uint64 public epochLengthSec; // epoch duration in seconds
 104 |     |     mapping(uint64 => uint256) public epochOutflow; // epoch => assets outflowed
 105 |     |     // Aggregate mapping: epoch => user => actionId => claimId
 106 |     |     mapping(uint64 => mapping(address => mapping(bytes32 => uint256))) private _epochClaimOf;
 107 |     |     // Fulfillment idempotency using actionIds
 108 |     |     mapping(bytes32 => bool) private _fulfilledAction;
 109 |     | 
 110 |     |     // ERC4626 virtual shares/assets to protect first depositor and matured yield hijack
 111 | *   |     uint256 private constant VIRTUAL_ASSETS = 1e6;
 112 |     |     uint256 private constant VIRTUAL_SHARES = 1e6;
 113 |     | 
 114 |     |     // --- Rebalance state machine ---
 115 |     |     enum VaultState {
 116 |     |         Idle,
 117 |     |         Allocating,
 118 |     |         Deallocating,
 119 |     |         Harvesting
 120 |     |     }
 121 |     | 
 122 |     |     VaultState public state;
 123 |     |     uint64 public stateSince; // timestamp when current state was entered
 124 |     |     uint64 public maxStateDuration; // optional cap on time spent out of Idle
 125 |     | 
 126 |     |     // --- Two-step governor ---
 127 |     |     address public governor;
 128 |     |     address public pendingGovernor;
 129 |     | 
 130 |     |     function initialize(
 131 |     |         IERC20 asset_,
 132 |     |         string memory name_,
 133 |     |         string memory symbol_,
 134 |     |         address hub_,
 135 |     |         address initialGovernor,
 136 |     |         address rebalancer,
 137 |     |         address adapterRegistry_,
 138 |     |         address feeRecipient_,
 139 |     |         uint16 performanceFeeBps_,
 140 |     |         address lst_
 141 |     |     ) external initializer {
 142 |     |         __UUPSUpgradeable_init();
 143 |     |         __AccessControl_init();
 144 |     |         __Pausable_init();
 145 |     |         __ReentrancyGuard_init();
 146 |     |         __ERC20_init(name_, symbol_);
 147 |     |         __ERC4626_init(asset_);
 148 |     |         hub = hub_;
 149 | *   |         adapterRegistry = AdapterRegistry(adapterRegistry_);
 150 |     |         feeRecipient = feeRecipient_;
 151 |     |         performanceFeeBps = performanceFeeBps_;
 152 |     |         lst = SuperchainERC20(lst_);
 153 | *   |         _grantRole(DEFAULT_ADMIN_ROLE, initialGovernor);
 154 | *   |         _grantRole(GOVERNOR_ROLE, initialGovernor);
 155 | *   |         _grantRole(REBALANCER_ROLE, rebalancer);
 156 |     |         depositsEnabled = true;
 157 |     |         bridgeEnabled = true;
 158 | *   |         _grantRole(HUB_ROLE, hub_);
 159 | *   |         state = VaultState.Idle;
 160 | *   |         stateSince = uint64(block.timestamp);
 161 | *   |         governor = initialGovernor;
 162 |     |     }
 163 |     | 
 164 |     |     function _authorizeUpgrade(address) internal override onlyRole(GOVERNOR_ROLE) {}
 165 |     | 
 166 |     |     // --- Flags ---
 167 |     |     function setFlags(bool _deposits, bool _borrows, bool _bridge) external onlyRole(GOVERNOR_ROLE) {
 168 |     |         depositsEnabled = _deposits;
 169 |     |         borrowsEnabled = _borrows;
 170 |     |         bridgeEnabled = _bridge;
 171 | *   |         emit FlagsUpdated(_deposits, _borrows, _bridge);
 172 |     |     }
 173 |     | 
 174 |     |     // --- State machine configs ---
 175 |     |     function setMaxStateDuration(uint64 seconds_) external onlyRole(GOVERNOR_ROLE) {
 176 |     |         maxStateDuration = seconds_;
 177 |     |     }
 178 |     | 
 179 |     |     /// @notice Emergency reset to Idle if a prior transition appears stuck (off-chain or adapter issue).
 180 |     |     function forceIdle() external onlyRole(GOVERNOR_ROLE) {
 181 |     |         uint8 prev = uint8(state);
 182 |     |         state = VaultState.Idle;
 183 |     |         stateSince = uint64(block.timestamp);
 184 |     |         emit StateChanged(prev, uint8(state));
 185 |     |     }
 186 |     | 
 187 |     |     // --- Governor transfer ---
 188 |     |     function proposeGovernor(address newGov) external onlyRole(GOVERNOR_ROLE) {
 189 |     |         require(newGov != address(0), "ZERO_GOV");
 190 |     |         pendingGovernor = newGov;
 191 |     |     }
 192 |     | 
 193 |     |     function acceptGovernor() external {
 194 |     |         require(msg.sender == pendingGovernor, "NOT_PENDING");
 195 |     |         address prev = governor;
 196 |     |         _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
 197 |     |         _grantRole(GOVERNOR_ROLE, msg.sender);
 198 |     |         _revokeRole(GOVERNOR_ROLE, prev);
 199 |     |         _revokeRole(DEFAULT_ADMIN_ROLE, prev);
 200 |     |         governor = msg.sender;
 201 |     |         pendingGovernor = address(0);
 202 |     |     }
 203 |     | 
 204 |     |     /// @notice Sets the local withdrawal buffer in basis points.
 205 |     |     function setWithdrawalBufferBps(uint16 bps) external onlyRole(GOVERNOR_ROLE) {
 206 | *   |         require(bps <= 10_000, "BPS");
 207 | *   |         withdrawalBufferBps = bps;
 208 |     |     }
 209 |     | 
 210 |     |     /// @notice Configure the per-epoch outflow cap and epoch length.
 211 |     |     function setEpochOutflowConfig(uint16 capBps, uint64 lengthSec) external onlyRole(GOVERNOR_ROLE) {
 212 | *   |         require(capBps <= 10_000, "BPS");
 213 | *   |         require(lengthSec > 0, "LEN");
 214 | *   |         epochOutflowCapBps = capBps;
 215 |     |         epochLengthSec = lengthSec;
 216 |     |     }
 217 |     | 
 218 |     |     // --- Internal: sync before share math ---
 219 |     |     /// @dev Intentionally empty hook to keep share math deterministic pre-mint.
 220 |     |     /// In more complex vaults, this may read adapter TVLs or accrue yield before mint/burn.
 221 |     |     function _preMintSync() internal view {
 222 |     |         // no-op in this implementation (read-only); left for pattern consistency.
 223 |     |     }
 224 |     | 
 225 |     |     // --- ERC4626 virtual conversions ---
 226 | *   |     function _convertToShares(uint256 assets, Math.Rounding rounding) internal view override returns (uint256) {
 227 | *   |         uint256 tAssets = super.totalAssets() + VIRTUAL_ASSETS;
 228 |     |         uint256 tSupply = totalSupply() + VIRTUAL_SHARES;
 229 | *   |         if (assets == 0) return 0;
 230 |     |         return Math.mulDiv(assets, tSupply, tAssets, rounding);
 231 |     |     }
 232 |     | 
 233 | *   |     function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view override returns (uint256) {
 234 | *   |         uint256 tAssets = super.totalAssets() + VIRTUAL_ASSETS;
 235 |     |         uint256 tSupply = totalSupply() + VIRTUAL_SHARES;
 236 | *   |         if (shares == 0) return 0;
 237 |     |         return Math.mulDiv(shares, tAssets, tSupply, rounding);
 238 |     |     }
 239 |     | 
 240 |     |     // --- ERC4626 overrides ---
 241 |     |     /// @inheritdoc ERC4626Upgradeable
 242 |     |     function deposit(uint256 assets, address receiver)
 243 |     |         public
 244 |     |         override
 245 |     |         whenNotPaused
 246 |     |         nonReentrant
 247 |     |         returns (uint256 shares)
 248 |     |     {
 249 | *   |         if (!depositsEnabled) revert DepositsDisabled();
 250 |     |         _preMintSync();
 251 |     |         shares = super.deposit(assets, receiver);
 252 |     |         // Mint LST mirror to receiver equal to shares
 253 | *   |         lst.mint(receiver, shares);
 254 | *   |         emit LstMinted(receiver, shares, address(lst));
 255 |     |     }
 256 |     | 
 257 |     |     /// @inheritdoc ERC4626Upgradeable
 258 |     |     function redeem(uint256 shares, address receiver, address owner)
 259 |     |         public
 260 |     |         override
 261 |     |         whenNotPaused
 262 |     |         nonReentrant
 263 |     |         returns (uint256 assets)
 264 |     |     {
 265 |     |         // Burn LST first, then shares
 266 | *   |         lst.burn(owner, shares);
 267 | *   |         emit LstBurned(owner, shares, address(lst));
 268 |     |         _preMintSync();
 269 |     |         assets = super.redeem(shares, receiver, owner);
 270 |     |     }
 271 |     | 
 272 |     |     // --- Strategy operations ---
 273 |     |     function allocateToAdapter(address adapter, uint256 assets, bytes calldata data)
 274 |     |         external
 275 |     |         onlyRole(REBALANCER_ROLE)
 276 |     |         whenNotPaused
 277 |     |         nonReentrant
 278 |     |     {
 279 |     |         if (state != VaultState.Idle) revert BadState();
 280 |     |         state = VaultState.Allocating;
 281 |     |         stateSince = uint64(block.timestamp);
 282 |     |         emit StateChanged(uint8(VaultState.Idle), uint8(state));
 283 |     |         if (!adapterRegistry.isAllowed(adapter)) revert NotAllowedAdapter();
 284 |     |         uint256 cap = adapterRegistry.capOf(adapter);
 285 |     |         // Enforce cap against current adapter allocation
 286 |     |         uint256 current = IAdapterLike(adapter).totalAssets();
 287 |     |         if (current + assets > cap) revert CapExceeded();
 288 |     |         // Move assets to adapter before invoking deposit to prevent reentrancy games on allowance
 289 |     |         IERC20(asset()).safeTransfer(adapter, assets);
 290 |     |         (bool ok,) = adapter.call(abi.encodeWithSignature("deposit(uint256,bytes)", assets, data));
 291 |     |         require(ok, "ADAPTER_DEPOSIT_FAIL");
 292 |     |         emit AdapterAllocated(adapter, asset(), assets);
 293 |     |         state = VaultState.Idle;
 294 |     |         stateSince = uint64(block.timestamp);
 295 |     |         emit StateChanged(uint8(VaultState.Allocating), uint8(state));
 296 |     |     }
 297 |     | 
 298 |     |     function deallocateFromAdapter(address adapter, uint256 assets, bytes calldata data)
 299 |     |         external
 300 |     |         onlyRole(REBALANCER_ROLE)
 301 |     |         whenNotPaused
 302 |     |         nonReentrant
 303 |     |     {
 304 |     |         if (state != VaultState.Idle) revert BadState();
 305 |     |         state = VaultState.Deallocating;
 306 |     |         stateSince = uint64(block.timestamp);
 307 |     |         emit StateChanged(uint8(VaultState.Idle), uint8(state));
 308 | *   |         (bool ok,) = adapter.call(abi.encodeWithSignature("withdraw(uint256,bytes)", assets, data));
 309 |     |         require(ok, "ADAPTER_WITHDRAW_FAIL");
 310 |     |         emit AdapterDeallocated(adapter, asset(), assets);
 311 |     |         state = VaultState.Idle;
 312 |     |         stateSince = uint64(block.timestamp);
 313 |     |         emit StateChanged(uint8(VaultState.Deallocating), uint8(state));
 314 |     |     }
 315 |     | 
 316 |     |     function harvestAdapter(address adapter, bytes calldata data)
 317 |     |         external
 318 |     |         onlyRole(REBALANCER_ROLE)
 319 |     |         whenNotPaused
 320 |     |         nonReentrant
 321 |     |     {
 322 |     |         if (state != VaultState.Idle) revert BadState();
 323 |     |         state = VaultState.Harvesting;
 324 |     |         stateSince = uint64(block.timestamp);
 325 |     |         emit StateChanged(uint8(VaultState.Idle), uint8(state));
 326 |     |         (bool ok,) = adapter.call(abi.encodeWithSignature("harvest(bytes)", data));
 327 |     |         require(ok, "ADAPTER_HARVEST_FAIL");
 328 |     |         emit Harvest(adapter, asset(), 0);
 329 |     |         state = VaultState.Idle;
 330 |     |         stateSince = uint64(block.timestamp);
 331 |     |         emit StateChanged(uint8(VaultState.Harvesting), uint8(state));
 332 |     |     }
 333 |     | 
 334 |     |     // --- Withdraw queue (harness) ---
 335 |     |     /// @notice Enqueue a withdraw request in shares units. Emits WithdrawQueued.
 336 |     |     function enqueueWithdraw(uint256 shares) external whenNotPaused returns (uint256 claimId) {
 337 |     |         require(shares > 0, "ZERO_SHARES");
 338 |     |         // Compute unique claim id to avoid same-block collisions
 339 |     |         uint256 nonce = ++_claimNonce;
 340 |     |         claimId = uint256(
 341 |     |             keccak256(
 342 |     |                 abi.encodePacked(block.chainid, address(this), msg.sender, shares, nonce, bytes32(0), block.timestamp)
 343 |     |             )
 344 |     |         );
 345 |     |         claims[claimId] = Claim({
 346 |     |             user: msg.sender,
 347 |     |             shares: uint128(shares),
 348 |     |             filledAssets: 0,
 349 |     |             active: true,
 350 |     |             ts: uint64(block.timestamp)
 351 |     |         });
 352 |     |         emit WithdrawQueued(msg.sender, claimId, shares, block.timestamp);
 353 |     |     }
 354 |     | 
 355 |     |     /// @notice Enqueue or aggregate a withdraw request keyed by (user, actionId, epoch).
 356 |     |     function enqueueWithdraw(uint256 shares, bytes32 actionId) external whenNotPaused returns (uint256 claimId) {
 357 |     |         require(shares > 0, "ZERO_SHARES");
 358 |     |         uint64 epoch = epochLengthSec == 0 ? 0 : uint64(block.timestamp / epochLengthSec);
 359 |     |         uint256 existing = _epochClaimOf[epoch][msg.sender][actionId];
 360 |     |         if (existing != 0 && claims[existing].active) {
 361 |     |             // aggregate into existing claim
 362 |     |             Claim storage c = claims[existing];
 363 |     |             c.shares = uint128(uint256(c.shares) + shares);
 364 |     |             claimId = existing;
 365 |     |         } else {
 366 |     |             uint256 nonce = ++_claimNonce;
 367 |     |             claimId = uint256(
 368 |     |                 keccak256(
 369 |     |                     abi.encodePacked(block.chainid, address(this), msg.sender, shares, nonce, actionId, block.timestamp)
 370 |     |                 )
 371 |     |             );
 372 |     |             claims[claimId] = Claim({
 373 |     |                 user: msg.sender,
 374 |     |                 shares: uint128(shares),
 375 |     |                 filledAssets: 0,
 376 |     |                 active: true,
 377 |     |                 ts: uint64(block.timestamp)
 378 |     |             });
 379 |     |             _epochClaimOf[epoch][msg.sender][actionId] = claimId;
 380 |     |             emit WithdrawQueued(msg.sender, claimId, shares, block.timestamp);
 381 |     |         }
 382 |     |     }
 383 |     | 
 384 |     |     /// @notice Fulfill a portion of a queued withdraw in asset units. Only HUB may call in tests/harness.
 385 |     |     function fulfillWithdraw(uint256 claimId, uint256 assets, bytes32 actionId)
 386 |     |         external
 387 |     |         onlyRole(HUB_ROLE)
 388 |     |         whenNotPaused
 389 |     |     {
 390 |     |         _fulfillWithdrawCore(claimId, assets, actionId);
 391 |     |     }
 392 |     | 
 393 |     |     function _fulfillWithdrawCore(uint256 claimId, uint256 assets, bytes32 actionId) internal {
 394 |     |         Claim storage c = claims[claimId];
 395 |     |         require(c.active, "INACTIVE");
 396 |     |         // Idempotency on (actionId, claimId)
 397 |     |         bytes32 key = keccak256(abi.encodePacked(actionId, claimId));
 398 |     |         if (_fulfilledAction[key]) revert NonceUsed(key);
 399 |     |         // Enforce epoch outflow cap
 400 |     |         if (epochLengthSec != 0 && epochOutflowCapBps != 0) {
 401 |     |             uint64 epoch = uint64(block.timestamp / epochLengthSec);
 402 |     |             uint256 tvl = totalAssets();
 403 |     |             uint256 cap = (tvl * uint256(epochOutflowCapBps)) / 10_000;
 404 |     |             uint256 sofar = epochOutflow[epoch];
 405 |     |             if (sofar + assets > cap) revert CapExceeded();
 406 |     |             epochOutflow[epoch] = sofar + assets;
 407 |     |         }
 408 |     |         // transfer assets to user up to local balance
 409 |     |         IERC20(asset()).safeTransfer(c.user, assets);
 410 |     |         unchecked {
 411 |     |             c.filledAssets += uint128(assets);
 412 |     |         }
 413 |     |         // if fully satisfied in assets terms, mark inactive
 414 |     |         uint256 targetAssets = convertToAssets(c.shares);
 415 |     |         if (c.filledAssets >= targetAssets) {
 416 |     |             c.active = false;
 417 |     |         }
 418 |     |         _fulfilledAction[key] = true;
 419 |     |         emit WithdrawFulfilled(c.user, claimId, assets, actionId, block.timestamp);
 420 |     |     }
 421 |     | 
 422 |     |     /// @notice Batch fulfill multiple withdraw claims; rejects duplicate claimIds within the call.
 423 |     |     function fulfillWithdrawBatch(uint256[] calldata claimIds, uint256[] calldata assets, bytes32 actionId)
 424 |     |         external
 425 |     |         onlyRole(HUB_ROLE)
 426 |     |         whenNotPaused
 427 |     |     {
 428 |     |         if (claimIds.length != assets.length) revert InvalidArray();
 429 |     |         // dedupe check using memory bitmap (simple quadratic due to small sizes in tests)
 430 |     |         for (uint256 i = 0; i < claimIds.length; i++) {
 431 |     |             for (uint256 j = i + 1; j < claimIds.length; j++) {
 432 |     |                 if (claimIds[i] == claimIds[j]) revert DuplicateClaim();
 433 |     |             }
 434 |     |         }
 435 |     |         for (uint256 i = 0; i < claimIds.length; i++) {
 436 |     |             _fulfillWithdrawCore(claimIds[i], assets[i], actionId);
 437 |     |         }
 438 |     |     }
 439 |     | 
 440 |     |     // --- Hub handlers ---
 441 |     |     function onRemoteCredit(address user, uint256 assets, uint256 shares, uint256 nonce, bytes32 actionId)
 442 |     |         external
 443 |     |         onlyRole(HUB_ROLE)
 444 |     |         whenNotPaused
 445 |     |     {
 446 |     |         if (!bridgeEnabled) revert BridgeDisabled();
 447 |     |         // Idempotency guard per (vault, nonce)
 448 |     |         bytes32 n = keccak256(abi.encodePacked(address(this), nonce));
 449 |     |         if (_usedNonce[n]) revert NonceUsed(n);
 450 |     |         _usedNonce[n] = true;
 451 |     |         // Credit shares and mirror LST
 452 |     |         _preMintSync();
 453 |     |         _deposit(user, user, assets, shares);
 454 |     |         lst.mint(user, shares);
 455 |     |         emit RemoteCreditHandled(user, asset(), assets, shares, nonce, actionId);
 456 |     |     }
 457 |     | 
 458 |     |     function requestRemoteLiquidity(address toUser, uint256 assets) external onlyRole(HUB_ROLE) whenNotPaused {
 459 |     |         // Serve from local buffer regardless of bridge flag; if bridge is disabled and insufficient buffer, fail fast
 460 |     |         uint256 bal = IERC20(asset()).balanceOf(address(this));
 461 |     |         uint256 tvl = totalAssets();
 462 |     |         uint256 maxLocal = (tvl * withdrawalBufferBps) / 10_000;
 463 |     |         bool served = false;
 464 |     |         if (assets <= bal && assets <= maxLocal) {
 465 |     |             // Enforce epoch outflow cap on fast path as well
 466 |     |             if (epochLengthSec != 0 && epochOutflowCapBps != 0) {
 467 |     |                 uint64 epoch = uint64(block.timestamp / epochLengthSec);
 468 |     |                 uint256 cap = (tvl * uint256(epochOutflowCapBps)) / 10_000;
 469 |     |                 uint256 sofar = epochOutflow[epoch];
 470 |     |                 if (sofar + assets > cap) revert CapExceeded();
 471 |     |                 epochOutflow[epoch] = sofar + assets;
 472 |     |             }
 473 |     |             IERC20(asset()).safeTransfer(toUser, assets);
 474 |     |             served = true;
 475 |     |             bytes32 actionId = keccak256(
 476 |     |                 abi.encode(
 477 |     |                     "RemoteLiquidity",
 478 |     |                     uint256(1),
 479 |     |                     block.chainid,
 480 |     |                     msg.sender,
 481 |     |                     block.chainid,
 482 |     |                     address(this),
 483 |     |                     toUser,
 484 |     |                     asset(),
 485 |     |                     assets,
 486 |     |                     uint256(block.number)
 487 |     |                 )
 488 |     |             );
 489 |     |             emit RemoteLiquidityServed(toUser, asset(), assets, actionId);
 490 |     |         } else {
 491 |     |             // Not enough local buffer; if bridge disabled, revert; otherwise, a cross-chain transfer would occur off-chain so no event here
 492 |     |             if (!bridgeEnabled) revert InsufficientBuffer();
 493 |     |         }
 494 |     |     }
 495 |     | 
 496 |     |     // --- Borrow/Liquidation hooks ---
 497 |     |     function payOutBorrow(address to, address asset_, uint256 amount)
 498 |     |         external
 499 |     |         onlyRole(CONTROLLER_ROLE)
 500 |     |         whenNotPaused
 501 |     |     {
 502 |     |         IERC20(asset_).safeTransfer(to, amount);
 503 |     |         bytes32 actionId = keccak256(
 504 |     |             abi.encode(
 505 |     |                 "BorrowPayout",
 506 |     |                 uint256(1),
 507 |     |                 block.chainid,
 508 |     |                 msg.sender,
 509 |     |                 block.chainid,
 510 |     |                 address(this),
 511 |     |                 to,
 512 |     |                 asset_,
 513 |     |                 amount,
 514 |     |                 uint256(block.number)
 515 |     |             )
 516 |     |         );
 517 |     |         emit BorrowPayout(to, asset_, amount, actionId, block.timestamp);
 518 |     |     }
 519 |     | 
 520 |     |     function onSeizeShares(address user, uint256 shares, address to) external onlyRole(CONTROLLER_ROLE) {
 521 |     |         // Burn user's LST mirror shares
 522 |     |         lst.burn(user, shares);
 523 |     |         // Transfer ERC4626 shares from user to liquidator destination
 524 |     |         _transfer(user, to, shares);
 525 |     |         bytes32 actionId = keccak256(
 526 |     |             abi.encode(
 527 |     |                 "SeizeShares",
 528 |     |                 uint256(1),
 529 |     |                 block.chainid,
 530 |     |                 msg.sender,
 531 |     |                 block.chainid,
 532 |     |                 address(this),
 533 |     |                 user,
 534 |     |                 asset(),
 535 |     |                 shares,
 536 |     |                 uint256(block.number)
 537 |     |             )
 538 |     |         );
 539 |     |         emit SharesSeized(user, to, shares, actionId);
 540 |     |     }
 541 |     | 
 542 |     |     uint256[50] private __gap;
 543 |     | }
 544 |     | 

/code/contracts/strategy/AdapterRegistry.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.24;
  3 |     | 
  4 |     | import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
  5 |     | import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
  6 |     | import {AccessControlUpgradeable} from "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
  7 |     | import {PausableUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";
  8 |     | 
  9 |     | /// @title AdapterRegistry
 10 |     | /// @notice Registry for strategy adapters and caps.
 11 | *   | contract AdapterRegistry is Initializable, UUPSUpgradeable, AccessControlUpgradeable, PausableUpgradeable {
 12 | *   |     bytes32 public constant GOVERNOR_ROLE = keccak256("GOVERNOR_ROLE");
 13 |     | 
 14 |     |     struct AdapterInfo {
 15 |     |         bool allowed;
 16 |     |         uint256 cap;
 17 |     |     }
 18 |     | 
 19 |     |     mapping(address => AdapterInfo) private adapters;
 20 |     | 
 21 |     |     event AdapterUpdated(address indexed adapter, bool allowed, uint256 cap);
 22 |     |     event RegistryPaused(bool paused);
 23 |     | 
 24 |     |     /// @notice Initializer
 25 |     |     function initialize(address governor) external initializer {
 26 |     |         __UUPSUpgradeable_init();
 27 |     |         __AccessControl_init();
 28 |     |         __Pausable_init();
 29 | *   |         _grantRole(DEFAULT_ADMIN_ROLE, governor);
 30 | *   |         _grantRole(GOVERNOR_ROLE, governor);
 31 |     |     }
 32 |     | 
 33 |     |     /// @inheritdoc UUPSUpgradeable
 34 |     |     function _authorizeUpgrade(address) internal override onlyRole(GOVERNOR_ROLE) {}
 35 |     | 
 36 |     |     function setAdapter(address adapter, bool allowed, uint256 cap) external onlyRole(GOVERNOR_ROLE) whenNotPaused {
 37 |     |         adapters[adapter] = AdapterInfo({allowed: allowed, cap: cap});
 38 |     |         emit AdapterUpdated(adapter, allowed, cap);
 39 |     |     }
 40 |     | 
 41 |     |     function isAllowed(address adapter) external view returns (bool) {
 42 |     |         return adapters[adapter].allowed;
 43 |     |     }
 44 |     | 
 45 |     |     function capOf(address adapter) external view returns (uint256) {
 46 |     |         return adapters[adapter].cap;
 47 |     |     }
 48 |     | 
 49 |     |     function pause() external onlyRole(GOVERNOR_ROLE) {
 50 |     |         _pause();
 51 |     |         emit RegistryPaused(true);
 52 |     |     }
 53 |     | 
 54 |     |     function unpause() external onlyRole(GOVERNOR_ROLE) {
 55 |     |         _unpause();
 56 |     |         emit RegistryPaused(false);
 57 |     |     }
 58 |     | 
 59 |     |     uint256[50] private __gap;
 60 |     | }
 61 |     | 

/code/contracts/tokens/SuperchainERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.24;
  3 |     | 
  4 |     | import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
  5 |     | import {ERC20Permit} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
  6 |     | import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
  7 |     | 
  8 |     | /// @title SuperchainERC20
  9 |     | /// @notice Non-upgradeable ERC20 with AccessControl mint/burn via MINTER_ROLE.
 10 | *   | contract SuperchainERC20 is ERC20, ERC20Permit, AccessControl {
 11 | *   |     bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
 12 |     | 
 13 |     |     event MinterSet(address indexed vault, bool enabled);
 14 |     | 
 15 |     |     /// @notice Constructs the token.
 16 |     |     /// @param name_ Token name.
 17 |     |     /// @param symbol_ Token symbol.
 18 |     |     constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) ERC20Permit(name_) {
 19 | *   |         _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
 20 |     |     }
 21 |     | 
 22 |     |     /// @notice Grants MINTER_ROLE and emits MinterSet for indexers.
 23 |     |     function grantMinter(address vault) external onlyRole(DEFAULT_ADMIN_ROLE) {
 24 | *   |         _grantRole(MINTER_ROLE, vault);
 25 | *   |         emit MinterSet(vault, true);
 26 |     |     }
 27 |     | 
 28 |     |     /// @notice Revokes MINTER_ROLE and emits MinterSet for indexers.
 29 |     |     function revokeMinter(address vault) external onlyRole(DEFAULT_ADMIN_ROLE) {
 30 |     |         _revokeRole(MINTER_ROLE, vault);
 31 |     |         emit MinterSet(vault, false);
 32 |     |     }
 33 |     | 
 34 |     |     /// @notice Mints tokens to an account. Only MINTER_ROLE.
 35 |     |     function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {
 36 |     |         _mint(to, amount);
 37 |     |     }
 38 |     | 
 39 |     |     /// @notice Burns tokens from an account. Only MINTER_ROLE (vault controls burns upon redeem).
 40 |     |     function burn(address from, uint256 amount) external onlyRole(MINTER_ROLE) {
 41 |     |         _burn(from, amount);
 42 |     |     }
 43 |     | 
 44 |     |     function decimals() public view virtual override returns (uint8) {
 45 |     |         return 18;
 46 |     |     }
 47 |     | }
 48 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IAccessControl} from "@openzeppelin/contracts/access/IAccessControl.sol";
   7 |     | import {ContextUpgradeable} from "../utils/ContextUpgradeable.sol";
   8 |     | import {ERC165Upgradeable} from "../utils/introspection/ERC165Upgradeable.sol";
   9 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Contract module that allows children to implement role-based access
  13 |     |  * control mechanisms. This is a lightweight version that doesn't allow enumerating role
  14 |     |  * members except through off-chain means by accessing the contract event logs. Some
  15 |     |  * applications may benefit from on-chain enumerability, for those cases see
  16 |     |  * {AccessControlEnumerable}.
  17 |     |  *
  18 |     |  * Roles are referred to by their `bytes32` identifier. These should be exposed
  19 |     |  * in the external API and be unique. The best way to achieve this is by
  20 |     |  * using `public constant` hash digests:
  21 |     |  *
  22 |     |  * ```solidity
  23 |     |  * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
  24 |     |  * ```
  25 |     |  *
  26 |     |  * Roles can be used to represent a set of permissions. To restrict access to a
  27 |     |  * function call, use {hasRole}:
  28 |     |  *
  29 |     |  * ```solidity
  30 |     |  * function foo() public {
  31 |     |  *     require(hasRole(MY_ROLE, msg.sender));
  32 |     |  *     ...
  33 |     |  * }
  34 |     |  * ```
  35 |     |  *
  36 |     |  * Roles can be granted and revoked dynamically via the {grantRole} and
  37 |     |  * {revokeRole} functions. Each role has an associated admin role, and only
  38 |     |  * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
  39 |     |  *
  40 |     |  * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
  41 |     |  * that only accounts with this role will be able to grant or revoke other
  42 |     |  * roles. More complex role relationships can be created by using
  43 |     |  * {_setRoleAdmin}.
  44 |     |  *
  45 |     |  * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
  46 |     |  * grant and revoke this role. Extra precautions should be taken to secure
  47 |     |  * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
  48 |     |  * to enforce additional security measures for this role.
  49 |     |  */
  50 |     | abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {
  51 |     |     struct RoleData {
  52 |     |         mapping(address account => bool) hasRole;
  53 |     |         bytes32 adminRole;
  54 |     |     }
  55 |     | 
  56 |     |     bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
  57 |     | 
  58 |     | 
  59 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl
  60 |     |     struct AccessControlStorage {
  61 |     |         mapping(bytes32 role => RoleData) _roles;
  62 |     |     }
  63 |     | 
  64 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.AccessControl")) - 1)) & ~bytes32(uint256(0xff))
  65 |     |     bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;
  66 |     | 
  67 |     |     function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {
  68 | *   |         assembly {
  69 |     |             $.slot := AccessControlStorageLocation
  70 |     |         }
  71 |     |     }
  72 |     | 
  73 |     |     /**
  74 |     |      * @dev Modifier that checks that an account has a specific role. Reverts
  75 |     |      * with an {AccessControlUnauthorizedAccount} error including the required role.
  76 |     |      */
  77 |     |     modifier onlyRole(bytes32 role) {
  78 | *   |         _checkRole(role);
  79 |     |         _;
  80 |     |     }
  81 |     | 
  82 |     |     function __AccessControl_init() internal onlyInitializing {
  83 |     |     }
  84 |     | 
  85 |     |     function __AccessControl_init_unchained() internal onlyInitializing {
  86 |     |     }
  87 |     |     /**
  88 |     |      * @dev See {IERC165-supportsInterface}.
  89 |     |      */
  90 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
  91 |     |         return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev Returns `true` if `account` has been granted `role`.
  96 |     |      */
  97 |     |     function hasRole(bytes32 role, address account) public view virtual returns (bool) {
  98 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
  99 |     |         return $._roles[role].hasRole[account];
 100 |     |     }
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
 104 |     |      * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
 105 |     |      */
 106 | *   |     function _checkRole(bytes32 role) internal view virtual {
 107 |     |         _checkRole(role, _msgSender());
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
 112 |     |      * is missing `role`.
 113 |     |      */
 114 |     |     function _checkRole(bytes32 role, address account) internal view virtual {
 115 | *   |         if (!hasRole(role, account)) {
 116 |     |             revert AccessControlUnauthorizedAccount(account, role);
 117 |     |         }
 118 |     |     }
 119 |     | 
 120 |     |     /**
 121 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
 122 |     |      * {revokeRole}.
 123 |     |      *
 124 |     |      * To change a role's admin, use {_setRoleAdmin}.
 125 |     |      */
 126 |     |     function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
 127 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 128 |     |         return $._roles[role].adminRole;
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Grants `role` to `account`.
 133 |     |      *
 134 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
 135 |     |      * event.
 136 |     |      *
 137 |     |      * Requirements:
 138 |     |      *
 139 |     |      * - the caller must have ``role``'s admin role.
 140 |     |      *
 141 |     |      * May emit a {RoleGranted} event.
 142 |     |      */
 143 |     |     function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 144 |     |         _grantRole(role, account);
 145 |     |     }
 146 |     | 
 147 |     |     /**
 148 |     |      * @dev Revokes `role` from `account`.
 149 |     |      *
 150 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
 151 |     |      *
 152 |     |      * Requirements:
 153 |     |      *
 154 |     |      * - the caller must have ``role``'s admin role.
 155 |     |      *
 156 |     |      * May emit a {RoleRevoked} event.
 157 |     |      */
 158 |     |     function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 159 |     |         _revokeRole(role, account);
 160 |     |     }
 161 |     | 
 162 |     |     /**
 163 |     |      * @dev Revokes `role` from the calling account.
 164 |     |      *
 165 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
 166 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
 167 |     |      * if they are compromised (such as when a trusted device is misplaced).
 168 |     |      *
 169 |     |      * If the calling account had been revoked `role`, emits a {RoleRevoked}
 170 |     |      * event.
 171 |     |      *
 172 |     |      * Requirements:
 173 |     |      *
 174 |     |      * - the caller must be `callerConfirmation`.
 175 |     |      *
 176 |     |      * May emit a {RoleRevoked} event.
 177 |     |      */
 178 |     |     function renounceRole(bytes32 role, address callerConfirmation) public virtual {
 179 |     |         if (callerConfirmation != _msgSender()) {
 180 |     |             revert AccessControlBadConfirmation();
 181 |     |         }
 182 |     | 
 183 |     |         _revokeRole(role, callerConfirmation);
 184 |     |     }
 185 |     | 
 186 |     |     /**
 187 |     |      * @dev Sets `adminRole` as ``role``'s admin role.
 188 |     |      *
 189 |     |      * Emits a {RoleAdminChanged} event.
 190 |     |      */
 191 |     |     function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
 192 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 193 |     |         bytes32 previousAdminRole = getRoleAdmin(role);
 194 |     |         $._roles[role].adminRole = adminRole;
 195 |     |         emit RoleAdminChanged(role, previousAdminRole, adminRole);
 196 |     |     }
 197 |     | 
 198 |     |     /**
 199 |     |      * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
 200 |     |      *
 201 |     |      * Internal function without access restriction.
 202 |     |      *
 203 |     |      * May emit a {RoleGranted} event.
 204 |     |      */
 205 | *   |     function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
 206 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 207 |     |         if (!hasRole(role, account)) {
 208 | *   |             $._roles[role].hasRole[account] = true;
 209 | *   |             emit RoleGranted(role, account, _msgSender());
 210 | *   |             return true;
 211 |     |         } else {
 212 |     |             return false;
 213 |     |         }
 214 |     |     }
 215 |     | 
 216 |     |     /**
 217 |     |      * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
 218 |     |      *
 219 |     |      * Internal function without access restriction.
 220 |     |      *
 221 |     |      * May emit a {RoleRevoked} event.
 222 |     |      */
 223 |     |     function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
 224 |     |         AccessControlStorage storage $ = _getAccessControlStorage();
 225 |     |         if (hasRole(role, account)) {
 226 |     |             $._roles[role].hasRole[account] = false;
 227 |     |             emit RoleRevoked(role, account, _msgSender());
 228 |     |             return true;
 229 |     |         } else {
 230 |     |             return false;
 231 |     |         }
 232 |     |     }
 233 |     | }
 234 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed
   8 |     |  * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an
   9 |     |  * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer
  10 |     |  * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.
  11 |     |  *
  12 |     |  * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be
  13 |     |  * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in
  14 |     |  * case an upgrade adds a module that needs to be initialized.
  15 |     |  *
  16 |     |  * For example:
  17 |     |  *
  18 |     |  * [.hljs-theme-light.nopadding]
  19 |     |  * ```solidity
  20 |     |  * contract MyToken is ERC20Upgradeable {
  21 |     |  *     function initialize() initializer public {
  22 |     |  *         __ERC20_init("MyToken", "MTK");
  23 |     |  *     }
  24 |     |  * }
  25 |     |  *
  26 |     |  * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {
  27 |     |  *     function initializeV2() reinitializer(2) public {
  28 |     |  *         __ERC20Permit_init("MyToken");
  29 |     |  *     }
  30 |     |  * }
  31 |     |  * ```
  32 |     |  *
  33 |     |  * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as
  34 |     |  * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.
  35 |     |  *
  36 |     |  * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure
  37 |     |  * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.
  38 |     |  *
  39 |     |  * [CAUTION]
  40 |     |  * ====
  41 |     |  * Avoid leaving a contract uninitialized.
  42 |     |  *
  43 |     |  * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation
  44 |     |  * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke
  45 |     |  * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:
  46 |     |  *
  47 |     |  * [.hljs-theme-light.nopadding]
  48 |     |  * ```
  49 |     |  * /// @custom:oz-upgrades-unsafe-allow constructor
  50 |     |  * constructor() {
  51 |     |  *     _disableInitializers();
  52 |     |  * }
  53 |     |  * ```
  54 |     |  * ====
  55 |     |  */
  56 |     | abstract contract Initializable {
  57 |     |     /**
  58 |     |      * @dev Storage of the initializable contract.
  59 |     |      *
  60 |     |      * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions
  61 |     |      * when using with upgradeable contracts.
  62 |     |      *
  63 |     |      * @custom:storage-location erc7201:openzeppelin.storage.Initializable
  64 |     |      */
  65 |     |     struct InitializableStorage {
  66 |     |         /**
  67 |     |          * @dev Indicates that the contract has been initialized.
  68 |     |          */
  69 |     |         uint64 _initialized;
  70 |     |         /**
  71 |     |          * @dev Indicates that the contract is in the process of being initialized.
  72 |     |          */
  73 |     |         bool _initializing;
  74 |     |     }
  75 |     | 
  76 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Initializable")) - 1)) & ~bytes32(uint256(0xff))
  77 |     |     bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;
  78 |     | 
  79 |     |     /**
  80 |     |      * @dev The contract is already initialized.
  81 |     |      */
  82 |     |     error InvalidInitialization();
  83 |     | 
  84 |     |     /**
  85 |     |      * @dev The contract is not initializing.
  86 |     |      */
  87 |     |     error NotInitializing();
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Triggered when the contract has been initialized or reinitialized.
  91 |     |      */
  92 |     |     event Initialized(uint64 version);
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,
  96 |     |      * `onlyInitializing` functions can be used to initialize parent contracts.
  97 |     |      *
  98 |     |      * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any
  99 |     |      * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in
 100 |     |      * production.
 101 |     |      *
 102 |     |      * Emits an {Initialized} event.
 103 |     |      */
 104 |     |     modifier initializer() {
 105 |     |         // solhint-disable-next-line var-name-mixedcase
 106 |     |         InitializableStorage storage $ = _getInitializableStorage();
 107 |     | 
 108 |     |         // Cache values to avoid duplicated sloads
 109 | *   |         bool isTopLevelCall = !$._initializing;
 110 |     |         uint64 initialized = $._initialized;
 111 |     | 
 112 |     |         // Allowed calls:
 113 |     |         // - initialSetup: the contract is not in the initializing state and no previous version was
 114 |     |         //                 initialized
 115 |     |         // - construction: the contract is initialized at version 1 (no reininitialization) and the
 116 |     |         //                 current contract is just being deployed
 117 | *   |         bool initialSetup = initialized == 0 && isTopLevelCall;
 118 | *   |         bool construction = initialized == 1 && address(this).code.length == 0;
 119 |     | 
 120 | *   |         if (!initialSetup && !construction) {
 121 |     |             revert InvalidInitialization();
 122 |     |         }
 123 |     |         $._initialized = 1;
 124 | *   |         if (isTopLevelCall) {
 125 |     |             $._initializing = true;
 126 |     |         }
 127 |     |         _;
 128 | *   |         if (isTopLevelCall) {
 129 |     |             $._initializing = false;
 130 | *   |             emit Initialized(1);
 131 |     |         }
 132 |     |     }
 133 |     | 
 134 |     |     /**
 135 |     |      * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the
 136 |     |      * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be
 137 |     |      * used to initialize parent contracts.
 138 |     |      *
 139 |     |      * A reinitializer may be used after the original initialization step. This is essential to configure modules that
 140 |     |      * are added through upgrades and that require initialization.
 141 |     |      *
 142 |     |      * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`
 143 |     |      * cannot be nested. If one is invoked in the context of another, execution will revert.
 144 |     |      *
 145 |     |      * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in
 146 |     |      * a contract, executing them in the right order is up to the developer or operator.
 147 |     |      *
 148 |     |      * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.
 149 |     |      *
 150 |     |      * Emits an {Initialized} event.
 151 |     |      */
 152 |     |     modifier reinitializer(uint64 version) {
 153 |     |         // solhint-disable-next-line var-name-mixedcase
 154 |     |         InitializableStorage storage $ = _getInitializableStorage();
 155 |     | 
 156 |     |         if ($._initializing || $._initialized >= version) {
 157 |     |             revert InvalidInitialization();
 158 |     |         }
 159 |     |         $._initialized = version;
 160 |     |         $._initializing = true;
 161 |     |         _;
 162 |     |         $._initializing = false;
 163 |     |         emit Initialized(version);
 164 |     |     }
 165 |     | 
 166 |     |     /**
 167 |     |      * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the
 168 |     |      * {initializer} and {reinitializer} modifiers, directly or indirectly.
 169 |     |      */
 170 | *   |     modifier onlyInitializing() {
 171 |     |         _checkInitializing();
 172 |     |         _;
 173 |     |     }
 174 |     | 
 175 |     |     /**
 176 |     |      * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.
 177 |     |      */
 178 | *   |     function _checkInitializing() internal view virtual {
 179 | *   |         if (!_isInitializing()) {
 180 |     |             revert NotInitializing();
 181 |     |         }
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
 186 |     |      * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
 187 |     |      * to any version. It is recommended to use this to lock implementation contracts that are designed to be called
 188 |     |      * through proxies.
 189 |     |      *
 190 |     |      * Emits an {Initialized} event the first time it is successfully executed.
 191 |     |      */
 192 |     |     function _disableInitializers() internal virtual {
 193 |     |         // solhint-disable-next-line var-name-mixedcase
 194 |     |         InitializableStorage storage $ = _getInitializableStorage();
 195 |     | 
 196 |     |         if ($._initializing) {
 197 |     |             revert InvalidInitialization();
 198 |     |         }
 199 |     |         if ($._initialized != type(uint64).max) {
 200 |     |             $._initialized = type(uint64).max;
 201 |     |             emit Initialized(type(uint64).max);
 202 |     |         }
 203 |     |     }
 204 |     | 
 205 |     |     /**
 206 |     |      * @dev Returns the highest version that has been initialized. See {reinitializer}.
 207 |     |      */
 208 |     |     function _getInitializedVersion() internal view returns (uint64) {
 209 |     |         return _getInitializableStorage()._initialized;
 210 |     |     }
 211 |     | 
 212 |     |     /**
 213 |     |      * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.
 214 |     |      */
 215 |     |     function _isInitializing() internal view returns (bool) {
 216 |     |         return _getInitializableStorage()._initializing;
 217 |     |     }
 218 |     | 
 219 |     |     /**
 220 |     |      * @dev Returns a pointer to the storage namespace.
 221 |     |      */
 222 |     |     // solhint-disable-next-line var-name-mixedcase
 223 |     |     function _getInitializableStorage() private pure returns (InitializableStorage storage $) {
 224 | *   |         assembly {
 225 |     |             $.slot := INITIALIZABLE_STORAGE
 226 |     |         }
 227 |     |     }
 228 |     | }
 229 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC1822Proxiable} from "@openzeppelin/contracts/interfaces/draft-IERC1822.sol";
   7 |     | import {ERC1967Utils} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol";
   8 |     | import {Initializable} from "./Initializable.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an
  12 |     |  * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.
  13 |     |  *
  14 |     |  * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is
  15 |     |  * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing
  16 |     |  * `UUPSUpgradeable` with a custom implementation of upgrades.
  17 |     |  *
  18 |     |  * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.
  19 |     |  */
  20 |     | abstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {
  21 |     |     /// @custom:oz-upgrades-unsafe-allow state-variable-immutable
  22 | *   |     address private immutable __self = address(this);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`
  26 |     |      * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,
  27 |     |      * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.
  28 |     |      * If the getter returns `"5.0.0"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must
  29 |     |      * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function
  30 |     |      * during an upgrade.
  31 |     |      */
  32 |     |     string public constant UPGRADE_INTERFACE_VERSION = "5.0.0";
  33 |     | 
  34 |     |     /**
  35 |     |      * @dev The call is from an unauthorized context.
  36 |     |      */
  37 |     |     error UUPSUnauthorizedCallContext();
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev The storage `slot` is unsupported as a UUID.
  41 |     |      */
  42 |     |     error UUPSUnsupportedProxiableUUID(bytes32 slot);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Check that the execution is being performed through a delegatecall call and that the execution context is
  46 |     |      * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case
  47 |     |      * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a
  48 |     |      * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to
  49 |     |      * fail.
  50 |     |      */
  51 |     |     modifier onlyProxy() {
  52 |     |         _checkProxy();
  53 |     |         _;
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Check that the execution is not being performed through a delegate call. This allows a function to be
  58 |     |      * callable on the implementing contract but not through proxies.
  59 |     |      */
  60 |     |     modifier notDelegated() {
  61 |     |         _checkNotDelegated();
  62 |     |         _;
  63 |     |     }
  64 |     | 
  65 |     |     function __UUPSUpgradeable_init() internal onlyInitializing {
  66 |     |     }
  67 |     | 
  68 |     |     function __UUPSUpgradeable_init_unchained() internal onlyInitializing {
  69 |     |     }
  70 |     |     /**
  71 |     |      * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the
  72 |     |      * implementation. It is used to validate the implementation's compatibility when performing an upgrade.
  73 |     |      *
  74 |     |      * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
  75 |     |      * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
  76 |     |      * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
  77 |     |      */
  78 |     |     function proxiableUUID() external view virtual notDelegated returns (bytes32) {
  79 |     |         return ERC1967Utils.IMPLEMENTATION_SLOT;
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call
  84 |     |      * encoded in `data`.
  85 |     |      *
  86 |     |      * Calls {_authorizeUpgrade}.
  87 |     |      *
  88 |     |      * Emits an {Upgraded} event.
  89 |     |      *
  90 |     |      * @custom:oz-upgrades-unsafe-allow-reachable delegatecall
  91 |     |      */
  92 |     |     function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {
  93 |     |         _authorizeUpgrade(newImplementation);
  94 |     |         _upgradeToAndCallUUPS(newImplementation, data);
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Reverts if the execution is not performed via delegatecall or the execution
  99 |     |      * context is not of a proxy with an ERC1967-compliant implementation pointing to self.
 100 |     |      * See {_onlyProxy}.
 101 |     |      */
 102 |     |     function _checkProxy() internal view virtual {
 103 |     |         if (
 104 |     |             address(this) == __self || // Must be called through delegatecall
 105 |     |             ERC1967Utils.getImplementation() != __self // Must be called through an active proxy
 106 |     |         ) {
 107 |     |             revert UUPSUnauthorizedCallContext();
 108 |     |         }
 109 |     |     }
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev Reverts if the execution is performed via delegatecall.
 113 |     |      * See {notDelegated}.
 114 |     |      */
 115 |     |     function _checkNotDelegated() internal view virtual {
 116 |     |         if (address(this) != __self) {
 117 |     |             // Must not be called through delegatecall
 118 |     |             revert UUPSUnauthorizedCallContext();
 119 |     |         }
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by
 124 |     |      * {upgradeToAndCall}.
 125 |     |      *
 126 |     |      * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.
 127 |     |      *
 128 |     |      * ```solidity
 129 |     |      * function _authorizeUpgrade(address) internal onlyOwner {}
 130 |     |      * ```
 131 |     |      */
 132 |     |     function _authorizeUpgrade(address newImplementation) internal virtual;
 133 |     | 
 134 |     |     /**
 135 |     |      * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.
 136 |     |      *
 137 |     |      * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value
 138 |     |      * is expected to be the implementation slot in ERC1967.
 139 |     |      *
 140 |     |      * Emits an {IERC1967-Upgraded} event.
 141 |     |      */
 142 |     |     function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {
 143 |     |         try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {
 144 |     |             if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {
 145 |     |                 revert UUPSUnsupportedProxiableUUID(slot);
 146 |     |             }
 147 |     |             ERC1967Utils.upgradeToAndCall(newImplementation, data);
 148 |     |         } catch {
 149 |     |             // The implementation is not UUPS
 150 |     |             revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);
 151 |     |         }
 152 |     |     }
 153 |     | }
 154 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   7 |     | import {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
   8 |     | import {ContextUpgradeable} from "../../utils/ContextUpgradeable.sol";
   9 |     | import {IERC20Errors} from "@openzeppelin/contracts/interfaces/draft-IERC6093.sol";
  10 |     | import {Initializable} from "../../proxy/utils/Initializable.sol";
  11 |     | 
  12 |     | /**
  13 |     |  * @dev Implementation of the {IERC20} interface.
  14 |     |  *
  15 |     |  * This implementation is agnostic to the way tokens are created. This means
  16 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  17 |     |  *
  18 |     |  * TIP: For a detailed writeup see our guide
  19 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  20 |     |  * to implement supply mechanisms].
  21 |     |  *
  22 |     |  * The default value of {decimals} is 18. To change this, you should override
  23 |     |  * this function so it returns a different value.
  24 |     |  *
  25 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  26 |     |  * instead returning `false` on failure. This behavior is nonetheless
  27 |     |  * conventional and does not conflict with the expectations of ERC20
  28 |     |  * applications.
  29 |     |  *
  30 |     |  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
  31 |     |  * This allows applications to reconstruct the allowance for all accounts just
  32 |     |  * by listening to said events. Other implementations of the EIP may not emit
  33 |     |  * these events, as it isn't required by the specification.
  34 |     |  */
  35 |     | abstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {
  36 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.ERC20
  37 |     |     struct ERC20Storage {
  38 |     |         mapping(address account => uint256) _balances;
  39 |     | 
  40 |     |         mapping(address account => mapping(address spender => uint256)) _allowances;
  41 |     | 
  42 |     |         uint256 _totalSupply;
  43 |     | 
  44 |     |         string _name;
  45 |     |         string _symbol;
  46 |     |     }
  47 |     | 
  48 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC20")) - 1)) & ~bytes32(uint256(0xff))
  49 |     |     bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;
  50 |     | 
  51 |     |     function _getERC20Storage() private pure returns (ERC20Storage storage $) {
  52 |     |         assembly {
  53 |     |             $.slot := ERC20StorageLocation
  54 |     |         }
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Sets the values for {name} and {symbol}.
  59 |     |      *
  60 |     |      * All two of these values are immutable: they can only be set once during
  61 |     |      * construction.
  62 |     |      */
  63 |     |     function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {
  64 |     |         __ERC20_init_unchained(name_, symbol_);
  65 |     |     }
  66 |     | 
  67 |     |     function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {
  68 |     |         ERC20Storage storage $ = _getERC20Storage();
  69 | *   |         $._name = name_;
  70 |     |         $._symbol = symbol_;
  71 |     |     }
  72 |     | 
  73 |     |     /**
  74 |     |      * @dev Returns the name of the token.
  75 |     |      */
  76 |     |     function name() public view virtual returns (string memory) {
  77 |     |         ERC20Storage storage $ = _getERC20Storage();
  78 |     |         return $._name;
  79 |     |     }
  80 |     | 
  81 |     |     /**
  82 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  83 |     |      * name.
  84 |     |      */
  85 |     |     function symbol() public view virtual returns (string memory) {
  86 |     |         ERC20Storage storage $ = _getERC20Storage();
  87 |     |         return $._symbol;
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Returns the number of decimals used to get its user representation.
  92 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  93 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  94 |     |      *
  95 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  96 |     |      * Ether and Wei. This is the default value returned by this function, unless
  97 |     |      * it's overridden.
  98 |     |      *
  99 |     |      * NOTE: This information is only used for _display_ purposes: it in
 100 |     |      * no way affects any of the arithmetic of the contract, including
 101 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
 102 |     |      */
 103 |     |     function decimals() public view virtual returns (uint8) {
 104 |     |         return 18;
 105 |     |     }
 106 |     | 
 107 |     |     /**
 108 |     |      * @dev See {IERC20-totalSupply}.
 109 |     |      */
 110 |     |     function totalSupply() public view virtual returns (uint256) {
 111 |     |         ERC20Storage storage $ = _getERC20Storage();
 112 |     |         return $._totalSupply;
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev See {IERC20-balanceOf}.
 117 |     |      */
 118 |     |     function balanceOf(address account) public view virtual returns (uint256) {
 119 |     |         ERC20Storage storage $ = _getERC20Storage();
 120 |     |         return $._balances[account];
 121 |     |     }
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev See {IERC20-transfer}.
 125 |     |      *
 126 |     |      * Requirements:
 127 |     |      *
 128 |     |      * - `to` cannot be the zero address.
 129 |     |      * - the caller must have a balance of at least `value`.
 130 |     |      */
 131 |     |     function transfer(address to, uint256 value) public virtual returns (bool) {
 132 |     |         address owner = _msgSender();
 133 |     |         _transfer(owner, to, value);
 134 |     |         return true;
 135 |     |     }
 136 |     | 
 137 |     |     /**
 138 |     |      * @dev See {IERC20-allowance}.
 139 |     |      */
 140 |     |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 141 |     |         ERC20Storage storage $ = _getERC20Storage();
 142 | *   |         return $._allowances[owner][spender];
 143 |     |     }
 144 |     | 
 145 |     |     /**
 146 |     |      * @dev See {IERC20-approve}.
 147 |     |      *
 148 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 149 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 150 |     |      *
 151 |     |      * Requirements:
 152 |     |      *
 153 |     |      * - `spender` cannot be the zero address.
 154 |     |      */
 155 |     |     function approve(address spender, uint256 value) public virtual returns (bool) {
 156 |     |         address owner = _msgSender();
 157 |     |         _approve(owner, spender, value);
 158 |     |         return true;
 159 |     |     }
 160 |     | 
 161 |     |     /**
 162 |     |      * @dev See {IERC20-transferFrom}.
 163 |     |      *
 164 |     |      * Emits an {Approval} event indicating the updated allowance. This is not
 165 |     |      * required by the EIP. See the note at the beginning of {ERC20}.
 166 |     |      *
 167 |     |      * NOTE: Does not update the allowance if the current allowance
 168 |     |      * is the maximum `uint256`.
 169 |     |      *
 170 |     |      * Requirements:
 171 |     |      *
 172 |     |      * - `from` and `to` cannot be the zero address.
 173 |     |      * - `from` must have a balance of at least `value`.
 174 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 175 |     |      * `value`.
 176 |     |      */
 177 |     |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 178 |     |         address spender = _msgSender();
 179 |     |         _spendAllowance(from, spender, value);
 180 |     |         _transfer(from, to, value);
 181 |     |         return true;
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 186 |     |      *
 187 |     |      * This internal function is equivalent to {transfer}, and can be used to
 188 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 189 |     |      *
 190 |     |      * Emits a {Transfer} event.
 191 |     |      *
 192 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 193 |     |      */
 194 |     |     function _transfer(address from, address to, uint256 value) internal {
 195 |     |         if (from == address(0)) {
 196 |     |             revert ERC20InvalidSender(address(0));
 197 |     |         }
 198 |     |         if (to == address(0)) {
 199 |     |             revert ERC20InvalidReceiver(address(0));
 200 |     |         }
 201 |     |         _update(from, to, value);
 202 |     |     }
 203 |     | 
 204 |     |     /**
 205 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 206 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 207 |     |      * this function.
 208 |     |      *
 209 |     |      * Emits a {Transfer} event.
 210 |     |      */
 211 |     |     function _update(address from, address to, uint256 value) internal virtual {
 212 |     |         ERC20Storage storage $ = _getERC20Storage();
 213 | *   |         if (from == address(0)) {
 214 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 215 | *   |             $._totalSupply += value;
 216 |     |         } else {
 217 |     |             uint256 fromBalance = $._balances[from];
 218 | *   |             if (fromBalance < value) {
 219 |     |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 220 |     |             }
 221 |     |             unchecked {
 222 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 223 |     |                 $._balances[from] = fromBalance - value;
 224 |     |             }
 225 |     |         }
 226 |     | 
 227 | *   |         if (to == address(0)) {
 228 |     |             unchecked {
 229 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 230 |     |                 $._totalSupply -= value;
 231 |     |             }
 232 |     |         } else {
 233 |     |             unchecked {
 234 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 235 |     |                 $._balances[to] += value;
 236 |     |             }
 237 |     |         }
 238 |     | 
 239 | *   |         emit Transfer(from, to, value);
 240 |     |     }
 241 |     | 
 242 |     |     /**
 243 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 244 |     |      * Relies on the `_update` mechanism
 245 |     |      *
 246 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 247 |     |      *
 248 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 249 |     |      */
 250 |     |     function _mint(address account, uint256 value) internal {
 251 | *   |         if (account == address(0)) {
 252 |     |             revert ERC20InvalidReceiver(address(0));
 253 |     |         }
 254 |     |         _update(address(0), account, value);
 255 |     |     }
 256 |     | 
 257 |     |     /**
 258 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 259 |     |      * Relies on the `_update` mechanism.
 260 |     |      *
 261 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 262 |     |      *
 263 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 264 |     |      */
 265 |     |     function _burn(address account, uint256 value) internal {
 266 | *   |         if (account == address(0)) {
 267 |     |             revert ERC20InvalidSender(address(0));
 268 |     |         }
 269 |     |         _update(account, address(0), value);
 270 |     |     }
 271 |     | 
 272 |     |     /**
 273 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 274 |     |      *
 275 |     |      * This internal function is equivalent to `approve`, and can be used to
 276 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 277 |     |      *
 278 |     |      * Emits an {Approval} event.
 279 |     |      *
 280 |     |      * Requirements:
 281 |     |      *
 282 |     |      * - `owner` cannot be the zero address.
 283 |     |      * - `spender` cannot be the zero address.
 284 |     |      *
 285 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 286 |     |      */
 287 |     |     function _approve(address owner, address spender, uint256 value) internal {
 288 |     |         _approve(owner, spender, value, true);
 289 |     |     }
 290 |     | 
 291 |     |     /**
 292 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 293 |     |      *
 294 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 295 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 296 |     |      * `Approval` event during `transferFrom` operations.
 297 |     |      *
 298 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 299 |     |      * true using the following override:
 300 |     |      * ```
 301 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 302 |     |      *     super._approve(owner, spender, value, true);
 303 |     |      * }
 304 |     |      * ```
 305 |     |      *
 306 |     |      * Requirements are the same as {_approve}.
 307 |     |      */
 308 |     |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 309 |     |         ERC20Storage storage $ = _getERC20Storage();
 310 | *   |         if (owner == address(0)) {
 311 |     |             revert ERC20InvalidApprover(address(0));
 312 |     |         }
 313 | *   |         if (spender == address(0)) {
 314 |     |             revert ERC20InvalidSpender(address(0));
 315 |     |         }
 316 | *   |         $._allowances[owner][spender] = value;
 317 |     |         if (emitEvent) {
 318 |     |             emit Approval(owner, spender, value);
 319 |     |         }
 320 |     |     }
 321 |     | 
 322 |     |     /**
 323 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 324 |     |      *
 325 |     |      * Does not update the allowance value in case of infinite allowance.
 326 |     |      * Revert if not enough allowance is available.
 327 |     |      *
 328 |     |      * Does not emit an {Approval} event.
 329 |     |      */
 330 | *   |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 331 |     |         uint256 currentAllowance = allowance(owner, spender);
 332 | *   |         if (currentAllowance != type(uint256).max) {
 333 | *   |             if (currentAllowance < value) {
 334 |     |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 335 |     |             }
 336 |     |             unchecked {
 337 |     |                 _approve(owner, spender, currentAllowance - value, false);
 338 |     |             }
 339 |     |         }
 340 |     |     }
 341 |     | }
 342 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC4626Upgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   7 |     | import {IERC20Metadata} from "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
   8 |     | import {ERC20Upgradeable} from "../ERC20Upgradeable.sol";
   9 |     | import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
  10 |     | import {IERC4626} from "@openzeppelin/contracts/interfaces/IERC4626.sol";
  11 |     | import {Math} from "@openzeppelin/contracts/utils/math/Math.sol";
  12 |     | import {Initializable} from "../../../proxy/utils/Initializable.sol";
  13 |     | 
  14 |     | /**
  15 |     |  * @dev Implementation of the ERC4626 "Tokenized Vault Standard" as defined in
  16 |     |  * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].
  17 |     |  *
  18 |     |  * This extension allows the minting and burning of "shares" (represented using the ERC20 inheritance) in exchange for
  19 |     |  * underlying "assets" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends
  20 |     |  * the ERC20 standard. Any additional extensions included along it would affect the "shares" token represented by this
  21 |     |  * contract and not the "assets" token which is an independent contract.
  22 |     |  *
  23 |     |  * [CAUTION]
  24 |     |  * ====
  25 |     |  * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning
  26 |     |  * with a "donation" to the vault that inflates the price of a share. This is variously known as a donation or inflation
  27 |     |  * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial
  28 |     |  * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may
  29 |     |  * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by
  30 |     |  * verifying the amount received is as expected, using a wrapper that performs these checks such as
  31 |     |  * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].
  32 |     |  *
  33 |     |  * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`
  34 |     |  * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault
  35 |     |  * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself
  36 |     |  * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset
  37 |     |  * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's
  38 |     |  * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more
  39 |     |  * expensive than it is profitable. More details about the underlying math can be found
  40 |     |  * xref:erc4626.adoc#inflation-attack[here].
  41 |     |  *
  42 |     |  * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued
  43 |     |  * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets
  44 |     |  * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience
  45 |     |  * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the
  46 |     |  * `_convertToShares` and `_convertToAssets` functions.
  47 |     |  *
  48 |     |  * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].
  49 |     |  * ====
  50 |     |  */
  51 |     | abstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626 {
  52 |     |     using Math for uint256;
  53 |     | 
  54 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.ERC4626
  55 |     |     struct ERC4626Storage {
  56 |     |         IERC20 _asset;
  57 |     |         uint8 _underlyingDecimals;
  58 |     |     }
  59 |     | 
  60 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ERC4626")) - 1)) & ~bytes32(uint256(0xff))
  61 |     |     bytes32 private constant ERC4626StorageLocation = 0x0773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00;
  62 |     | 
  63 |     |     function _getERC4626Storage() private pure returns (ERC4626Storage storage $) {
  64 |     |         assembly {
  65 |     |             $.slot := ERC4626StorageLocation
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Attempted to deposit more assets than the max amount for `receiver`.
  71 |     |      */
  72 |     |     error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Attempted to mint more shares than the max amount for `receiver`.
  76 |     |      */
  77 |     |     error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);
  78 |     | 
  79 |     |     /**
  80 |     |      * @dev Attempted to withdraw more assets than the max amount for `receiver`.
  81 |     |      */
  82 |     |     error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);
  83 |     | 
  84 |     |     /**
  85 |     |      * @dev Attempted to redeem more shares than the max amount for `receiver`.
  86 |     |      */
  87 |     |     error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).
  91 |     |      */
  92 |     |     function __ERC4626_init(IERC20 asset_) internal onlyInitializing {
  93 |     |         __ERC4626_init_unchained(asset_);
  94 |     |     }
  95 |     | 
  96 |     |     function __ERC4626_init_unchained(IERC20 asset_) internal onlyInitializing {
  97 |     |         ERC4626Storage storage $ = _getERC4626Storage();
  98 | *   |         (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);
  99 | *   |         $._underlyingDecimals = success ? assetDecimals : 18;
 100 |     |         $._asset = asset_;
 101 |     |     }
 102 |     | 
 103 |     |     /**
 104 |     |      * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.
 105 |     |      */
 106 | *   |     function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {
 107 | *   |         (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(
 108 | *   |             abi.encodeCall(IERC20Metadata.decimals, ())
 109 |     |         );
 110 | *   |         if (success && encodedDecimals.length >= 32) {
 111 | *   |             uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));
 112 | *   |             if (returnedDecimals <= type(uint8).max) {
 113 | *   |                 return (true, uint8(returnedDecimals));
 114 |     |             }
 115 |     |         }
 116 |     |         return (false, 0);
 117 |     |     }
 118 |     | 
 119 |     |     /**
 120 |     |      * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This
 121 |     |      * "original" value is cached during construction of the vault contract. If this read operation fails (e.g., the
 122 |     |      * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.
 123 |     |      *
 124 |     |      * See {IERC20Metadata-decimals}.
 125 |     |      */
 126 |     |     function decimals() public view virtual override(IERC20Metadata, ERC20Upgradeable) returns (uint8) {
 127 |     |         ERC4626Storage storage $ = _getERC4626Storage();
 128 |     |         return $._underlyingDecimals + _decimalsOffset();
 129 |     |     }
 130 |     | 
 131 |     |     /** @dev See {IERC4626-asset}. */
 132 |     |     function asset() public view virtual returns (address) {
 133 |     |         ERC4626Storage storage $ = _getERC4626Storage();
 134 |     |         return address($._asset);
 135 |     |     }
 136 |     | 
 137 |     |     /** @dev See {IERC4626-totalAssets}. */
 138 | *   |     function totalAssets() public view virtual returns (uint256) {
 139 |     |         ERC4626Storage storage $ = _getERC4626Storage();
 140 | *   |         return $._asset.balanceOf(address(this));
 141 |     |     }
 142 |     | 
 143 |     |     /** @dev See {IERC4626-convertToShares}. */
 144 |     |     function convertToShares(uint256 assets) public view virtual returns (uint256) {
 145 | *   |         return _convertToShares(assets, Math.Rounding.Floor);
 146 |     |     }
 147 |     | 
 148 |     |     /** @dev See {IERC4626-convertToAssets}. */
 149 |     |     function convertToAssets(uint256 shares) public view virtual returns (uint256) {
 150 | *   |         return _convertToAssets(shares, Math.Rounding.Floor);
 151 |     |     }
 152 |     | 
 153 |     |     /** @dev See {IERC4626-maxDeposit}. */
 154 |     |     function maxDeposit(address) public view virtual returns (uint256) {
 155 |     |         return type(uint256).max;
 156 |     |     }
 157 |     | 
 158 |     |     /** @dev See {IERC4626-maxMint}. */
 159 |     |     function maxMint(address) public view virtual returns (uint256) {
 160 |     |         return type(uint256).max;
 161 |     |     }
 162 |     | 
 163 |     |     /** @dev See {IERC4626-maxWithdraw}. */
 164 |     |     function maxWithdraw(address owner) public view virtual returns (uint256) {
 165 |     |         return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);
 166 |     |     }
 167 |     | 
 168 |     |     /** @dev See {IERC4626-maxRedeem}. */
 169 |     |     function maxRedeem(address owner) public view virtual returns (uint256) {
 170 |     |         return balanceOf(owner);
 171 |     |     }
 172 |     | 
 173 |     |     /** @dev See {IERC4626-previewDeposit}. */
 174 |     |     function previewDeposit(uint256 assets) public view virtual returns (uint256) {
 175 |     |         return _convertToShares(assets, Math.Rounding.Floor);
 176 |     |     }
 177 |     | 
 178 |     |     /** @dev See {IERC4626-previewMint}. */
 179 |     |     function previewMint(uint256 shares) public view virtual returns (uint256) {
 180 |     |         return _convertToAssets(shares, Math.Rounding.Ceil);
 181 |     |     }
 182 |     | 
 183 |     |     /** @dev See {IERC4626-previewWithdraw}. */
 184 |     |     function previewWithdraw(uint256 assets) public view virtual returns (uint256) {
 185 |     |         return _convertToShares(assets, Math.Rounding.Ceil);
 186 |     |     }
 187 |     | 
 188 |     |     /** @dev See {IERC4626-previewRedeem}. */
 189 |     |     function previewRedeem(uint256 shares) public view virtual returns (uint256) {
 190 |     |         return _convertToAssets(shares, Math.Rounding.Floor);
 191 |     |     }
 192 |     | 
 193 |     |     /** @dev See {IERC4626-deposit}. */
 194 |     |     function deposit(uint256 assets, address receiver) public virtual returns (uint256) {
 195 |     |         uint256 maxAssets = maxDeposit(receiver);
 196 |     |         if (assets > maxAssets) {
 197 |     |             revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);
 198 |     |         }
 199 |     | 
 200 |     |         uint256 shares = previewDeposit(assets);
 201 | *   |         _deposit(_msgSender(), receiver, assets, shares);
 202 |     | 
 203 |     |         return shares;
 204 |     |     }
 205 |     | 
 206 |     |     /** @dev See {IERC4626-mint}.
 207 |     |      *
 208 |     |      * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.
 209 |     |      * In this case, the shares will be minted without requiring any assets to be deposited.
 210 |     |      */
 211 |     |     function mint(uint256 shares, address receiver) public virtual returns (uint256) {
 212 |     |         uint256 maxShares = maxMint(receiver);
 213 |     |         if (shares > maxShares) {
 214 |     |             revert ERC4626ExceededMaxMint(receiver, shares, maxShares);
 215 |     |         }
 216 |     | 
 217 |     |         uint256 assets = previewMint(shares);
 218 |     |         _deposit(_msgSender(), receiver, assets, shares);
 219 |     | 
 220 |     |         return assets;
 221 |     |     }
 222 |     | 
 223 |     |     /** @dev See {IERC4626-withdraw}. */
 224 |     |     function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {
 225 |     |         uint256 maxAssets = maxWithdraw(owner);
 226 |     |         if (assets > maxAssets) {
 227 |     |             revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);
 228 |     |         }
 229 |     | 
 230 |     |         uint256 shares = previewWithdraw(assets);
 231 |     |         _withdraw(_msgSender(), receiver, owner, assets, shares);
 232 |     | 
 233 |     |         return shares;
 234 |     |     }
 235 |     | 
 236 |     |     /** @dev See {IERC4626-redeem}. */
 237 |     |     function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {
 238 |     |         uint256 maxShares = maxRedeem(owner);
 239 | *   |         if (shares > maxShares) {
 240 |     |             revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);
 241 |     |         }
 242 |     | 
 243 |     |         uint256 assets = previewRedeem(shares);
 244 | *   |         _withdraw(_msgSender(), receiver, owner, assets, shares);
 245 |     | 
 246 |     |         return assets;
 247 |     |     }
 248 |     | 
 249 |     |     /**
 250 |     |      * @dev Internal conversion function (from assets to shares) with support for rounding direction.
 251 |     |      */
 252 |     |     function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {
 253 |     |         return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);
 254 |     |     }
 255 |     | 
 256 |     |     /**
 257 |     |      * @dev Internal conversion function (from shares to assets) with support for rounding direction.
 258 |     |      */
 259 |     |     function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {
 260 |     |         return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);
 261 |     |     }
 262 |     | 
 263 |     |     /**
 264 |     |      * @dev Deposit/mint common workflow.
 265 |     |      */
 266 | *   |     function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {
 267 |     |         ERC4626Storage storage $ = _getERC4626Storage();
 268 |     |         // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the
 269 |     |         // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,
 270 |     |         // calls the vault, which is assumed not malicious.
 271 |     |         //
 272 |     |         // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the
 273 |     |         // assets are transferred and before the shares are minted, which is a valid state.
 274 |     |         // slither-disable-next-line reentrancy-no-eth
 275 | *   |         SafeERC20.safeTransferFrom($._asset, caller, address(this), assets);
 276 |     |         _mint(receiver, shares);
 277 |     | 
 278 | *   |         emit Deposit(caller, receiver, assets, shares);
 279 |     |     }
 280 |     | 
 281 |     |     /**
 282 |     |      * @dev Withdraw/redeem common workflow.
 283 |     |      */
 284 | *   |     function _withdraw(
 285 |     |         address caller,
 286 |     |         address receiver,
 287 |     |         address owner,
 288 |     |         uint256 assets,
 289 |     |         uint256 shares
 290 |     |     ) internal virtual {
 291 |     |         ERC4626Storage storage $ = _getERC4626Storage();
 292 | *   |         if (caller != owner) {
 293 | *   |             _spendAllowance(owner, caller, shares);
 294 |     |         }
 295 |     | 
 296 |     |         // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the
 297 |     |         // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,
 298 |     |         // calls the vault, which is assumed not malicious.
 299 |     |         //
 300 |     |         // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the
 301 |     |         // shares are burned and after the assets are transferred, which is a valid state.
 302 |     |         _burn(owner, shares);
 303 | *   |         SafeERC20.safeTransfer($._asset, receiver, assets);
 304 |     | 
 305 | *   |         emit Withdraw(caller, receiver, owner, assets, shares);
 306 |     |     }
 307 |     | 
 308 |     |     function _decimalsOffset() internal view virtual returns (uint8) {
 309 |     |         return 0;
 310 |     |     }
 311 |     | }
 312 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
  6 |     | 
  7 |     | /**
  8 |     |  * @dev Provides information about the current execution context, including the
  9 |     |  * sender of the transaction and its data. While these are generally available
 10 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 11 |     |  * manner, since when dealing with meta-transactions the account sending and
 12 |     |  * paying for execution may not be the actual sender (as far as an application
 13 |     |  * is concerned).
 14 |     |  *
 15 |     |  * This contract is only required for intermediate, library-like contracts.
 16 |     |  */
 17 |     | abstract contract ContextUpgradeable is Initializable {
 18 |     |     function __Context_init() internal onlyInitializing {
 19 |     |     }
 20 |     | 
 21 |     |     function __Context_init_unchained() internal onlyInitializing {
 22 |     |     }
 23 |     |     function _msgSender() internal view virtual returns (address) {
 24 | *   |         return msg.sender;
 25 |     |     }
 26 |     | 
 27 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 28 |     |         return msg.data;
 29 |     |     }
 30 |     | 
 31 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 32 |     |         return 0;
 33 |     |     }
 34 |     | }
 35 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {ContextUpgradeable} from "../utils/ContextUpgradeable.sol";
   7 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev Contract module which allows children to implement an emergency stop
  11 |     |  * mechanism that can be triggered by an authorized account.
  12 |     |  *
  13 |     |  * This module is used through inheritance. It will make available the
  14 |     |  * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
  15 |     |  * the functions of your contract. Note that they will not be pausable by
  16 |     |  * simply including this module, only once the modifiers are put in place.
  17 |     |  */
  18 |     | abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
  19 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.Pausable
  20 |     |     struct PausableStorage {
  21 |     |         bool _paused;
  22 |     |     }
  23 |     | 
  24 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.Pausable")) - 1)) & ~bytes32(uint256(0xff))
  25 |     |     bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;
  26 |     | 
  27 |     |     function _getPausableStorage() private pure returns (PausableStorage storage $) {
  28 | *   |         assembly {
  29 |     |             $.slot := PausableStorageLocation
  30 |     |         }
  31 |     |     }
  32 |     | 
  33 |     |     /**
  34 |     |      * @dev Emitted when the pause is triggered by `account`.
  35 |     |      */
  36 |     |     event Paused(address account);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Emitted when the pause is lifted by `account`.
  40 |     |      */
  41 |     |     event Unpaused(address account);
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev The operation failed because the contract is paused.
  45 |     |      */
  46 |     |     error EnforcedPause();
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev The operation failed because the contract is not paused.
  50 |     |      */
  51 |     |     error ExpectedPause();
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Initializes the contract in unpaused state.
  55 |     |      */
  56 |     |     function __Pausable_init() internal onlyInitializing {
  57 |     |         __Pausable_init_unchained();
  58 |     |     }
  59 |     | 
  60 |     |     function __Pausable_init_unchained() internal onlyInitializing {
  61 |     |         PausableStorage storage $ = _getPausableStorage();
  62 |     |         $._paused = false;
  63 |     |     }
  64 |     | 
  65 |     |     /**
  66 |     |      * @dev Modifier to make a function callable only when the contract is not paused.
  67 |     |      *
  68 |     |      * Requirements:
  69 |     |      *
  70 |     |      * - The contract must not be paused.
  71 |     |      */
  72 | *   |     modifier whenNotPaused() {
  73 |     |         _requireNotPaused();
  74 |     |         _;
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Modifier to make a function callable only when the contract is paused.
  79 |     |      *
  80 |     |      * Requirements:
  81 |     |      *
  82 |     |      * - The contract must be paused.
  83 |     |      */
  84 |     |     modifier whenPaused() {
  85 |     |         _requirePaused();
  86 |     |         _;
  87 |     |     }
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Returns true if the contract is paused, and false otherwise.
  91 |     |      */
  92 |     |     function paused() public view virtual returns (bool) {
  93 |     |         PausableStorage storage $ = _getPausableStorage();
  94 |     |         return $._paused;
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Throws if the contract is paused.
  99 |     |      */
 100 | *   |     function _requireNotPaused() internal view virtual {
 101 | *   |         if (paused()) {
 102 |     |             revert EnforcedPause();
 103 |     |         }
 104 |     |     }
 105 |     | 
 106 |     |     /**
 107 |     |      * @dev Throws if the contract is not paused.
 108 |     |      */
 109 |     |     function _requirePaused() internal view virtual {
 110 |     |         if (!paused()) {
 111 |     |             revert ExpectedPause();
 112 |     |         }
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev Triggers stopped state.
 117 |     |      *
 118 |     |      * Requirements:
 119 |     |      *
 120 |     |      * - The contract must not be paused.
 121 |     |      */
 122 |     |     function _pause() internal virtual whenNotPaused {
 123 |     |         PausableStorage storage $ = _getPausableStorage();
 124 |     |         $._paused = true;
 125 |     |         emit Paused(_msgSender());
 126 |     |     }
 127 |     | 
 128 |     |     /**
 129 |     |      * @dev Returns to normal state.
 130 |     |      *
 131 |     |      * Requirements:
 132 |     |      *
 133 |     |      * - The contract must be paused.
 134 |     |      */
 135 |     |     function _unpause() internal virtual whenPaused {
 136 |     |         PausableStorage storage $ = _getPausableStorage();
 137 |     |         $._paused = false;
 138 |     |         emit Unpaused(_msgSender());
 139 |     |     }
 140 |     | }
 141 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | import {Initializable} from "../proxy/utils/Initializable.sol";
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
   9 |     |  *
  10 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
  11 |     |  * available, which can be applied to functions to make sure there are no nested
  12 |     |  * (reentrant) calls to them.
  13 |     |  *
  14 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
  15 |     |  * `nonReentrant` may not call one another. This can be worked around by making
  16 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
  17 |     |  * points to them.
  18 |     |  *
  19 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
  20 |     |  * to protect against it, check out our blog post
  21 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
  22 |     |  */
  23 |     | abstract contract ReentrancyGuardUpgradeable is Initializable {
  24 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
  25 |     |     // word because each write operation emits an extra SLOAD to first read the
  26 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
  27 |     |     // back. This is the compiler's defense against contract upgrades and
  28 |     |     // pointer aliasing, and it cannot be disabled.
  29 |     | 
  30 |     |     // The values being non-zero value makes deployment a bit more expensive,
  31 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
  32 |     |     // amount. Since refunds are capped to a percentage of the total
  33 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
  34 |     |     // increase the likelihood of the full refund coming into effect.
  35 |     |     uint256 private constant NOT_ENTERED = 1;
  36 | *   |     uint256 private constant ENTERED = 2;
  37 |     | 
  38 |     |     /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard
  39 |     |     struct ReentrancyGuardStorage {
  40 |     |         uint256 _status;
  41 |     |     }
  42 |     | 
  43 |     |     // keccak256(abi.encode(uint256(keccak256("openzeppelin.storage.ReentrancyGuard")) - 1)) & ~bytes32(uint256(0xff))
  44 |     |     bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;
  45 |     | 
  46 |     |     function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {
  47 |     |         assembly {
  48 |     |             $.slot := ReentrancyGuardStorageLocation
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Unauthorized reentrant call.
  54 |     |      */
  55 |     |     error ReentrancyGuardReentrantCall();
  56 |     | 
  57 |     |     function __ReentrancyGuard_init() internal onlyInitializing {
  58 |     |         __ReentrancyGuard_init_unchained();
  59 |     |     }
  60 |     | 
  61 |     |     function __ReentrancyGuard_init_unchained() internal onlyInitializing {
  62 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  63 |     |         $._status = NOT_ENTERED;
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
  68 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
  69 |     |      * function is not supported. It is possible to prevent this from happening
  70 |     |      * by making the `nonReentrant` function external, and making it call a
  71 |     |      * `private` function that does the actual work.
  72 |     |      */
  73 | *   |     modifier nonReentrant() {
  74 |     |         _nonReentrantBefore();
  75 |     |         _;
  76 |     |         _nonReentrantAfter();
  77 |     |     }
  78 |     | 
  79 | *   |     function _nonReentrantBefore() private {
  80 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  81 |     |         // On the first call to nonReentrant, _status will be NOT_ENTERED
  82 | *   |         if ($._status == ENTERED) {
  83 |     |             revert ReentrancyGuardReentrantCall();
  84 |     |         }
  85 |     | 
  86 |     |         // Any calls to nonReentrant after this point will fail
  87 |     |         $._status = ENTERED;
  88 |     |     }
  89 |     | 
  90 |     |     function _nonReentrantAfter() private {
  91 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
  92 |     |         // By storing the original value once again, a refund is triggered (see
  93 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
  94 |     |         $._status = NOT_ENTERED;
  95 |     |     }
  96 |     | 
  97 |     |     /**
  98 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
  99 |     |      * `nonReentrant` function in the call stack.
 100 |     |      */
 101 |     |     function _reentrancyGuardEntered() internal view returns (bool) {
 102 |     |         ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();
 103 |     |         return $._status == ENTERED;
 104 |     |     }
 105 |     | }
 106 |     | 

/code/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
  7 |     | import {Initializable} from "../../proxy/utils/Initializable.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev Implementation of the {IERC165} interface.
 11 |     |  *
 12 |     |  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 13 |     |  * for the additional interface id that will be supported. For example:
 14 |     |  *
 15 |     |  * ```solidity
 16 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 17 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 18 |     |  * }
 19 |     |  * ```
 20 |     |  */
 21 |     | abstract contract ERC165Upgradeable is Initializable, IERC165 {
 22 |     |     function __ERC165_init() internal onlyInitializing {
 23 |     |     }
 24 |     | 
 25 |     |     function __ERC165_init_unchained() internal onlyInitializing {
 26 |     |     }
 27 |     |     /**
 28 |     |      * @dev See {IERC165-supportsInterface}.
 29 |     |      */
 30 |     |     function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
 31 |     |         return interfaceId == type(IERC165).interfaceId;
 32 |     |     }
 33 |     | }
 34 |     | 

/code/lib/openzeppelin-contracts/contracts/access/AccessControl.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IAccessControl} from "./IAccessControl.sol";
   7 |     | import {Context} from "../utils/Context.sol";
   8 |     | import {ERC165} from "../utils/introspection/ERC165.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev Contract module that allows children to implement role-based access
  12 |     |  * control mechanisms. This is a lightweight version that doesn't allow enumerating role
  13 |     |  * members except through off-chain means by accessing the contract event logs. Some
  14 |     |  * applications may benefit from on-chain enumerability, for those cases see
  15 |     |  * {AccessControlEnumerable}.
  16 |     |  *
  17 |     |  * Roles are referred to by their `bytes32` identifier. These should be exposed
  18 |     |  * in the external API and be unique. The best way to achieve this is by
  19 |     |  * using `public constant` hash digests:
  20 |     |  *
  21 |     |  * ```solidity
  22 |     |  * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
  23 |     |  * ```
  24 |     |  *
  25 |     |  * Roles can be used to represent a set of permissions. To restrict access to a
  26 |     |  * function call, use {hasRole}:
  27 |     |  *
  28 |     |  * ```solidity
  29 |     |  * function foo() public {
  30 |     |  *     require(hasRole(MY_ROLE, msg.sender));
  31 |     |  *     ...
  32 |     |  * }
  33 |     |  * ```
  34 |     |  *
  35 |     |  * Roles can be granted and revoked dynamically via the {grantRole} and
  36 |     |  * {revokeRole} functions. Each role has an associated admin role, and only
  37 |     |  * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
  38 |     |  *
  39 |     |  * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
  40 |     |  * that only accounts with this role will be able to grant or revoke other
  41 |     |  * roles. More complex role relationships can be created by using
  42 |     |  * {_setRoleAdmin}.
  43 |     |  *
  44 |     |  * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
  45 |     |  * grant and revoke this role. Extra precautions should be taken to secure
  46 |     |  * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
  47 |     |  * to enforce additional security measures for this role.
  48 |     |  */
  49 |     | abstract contract AccessControl is Context, IAccessControl, ERC165 {
  50 |     |     struct RoleData {
  51 |     |         mapping(address account => bool) hasRole;
  52 |     |         bytes32 adminRole;
  53 |     |     }
  54 |     | 
  55 |     |     mapping(bytes32 role => RoleData) private _roles;
  56 |     | 
  57 |     |     bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Modifier that checks that an account has a specific role. Reverts
  61 |     |      * with an {AccessControlUnauthorizedAccount} error including the required role.
  62 |     |      */
  63 |     |     modifier onlyRole(bytes32 role) {
  64 | *   |         _checkRole(role);
  65 |     |         _;
  66 |     |     }
  67 |     | 
  68 |     |     /**
  69 |     |      * @dev See {IERC165-supportsInterface}.
  70 |     |      */
  71 |     |     function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
  72 |     |         return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
  73 |     |     }
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Returns `true` if `account` has been granted `role`.
  77 |     |      */
  78 |     |     function hasRole(bytes32 role, address account) public view virtual returns (bool) {
  79 | *   |         return _roles[role].hasRole[account];
  80 |     |     }
  81 |     | 
  82 |     |     /**
  83 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`
  84 |     |      * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.
  85 |     |      */
  86 | *   |     function _checkRole(bytes32 role) internal view virtual {
  87 |     |         _checkRole(role, _msgSender());
  88 |     |     }
  89 |     | 
  90 |     |     /**
  91 |     |      * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`
  92 |     |      * is missing `role`.
  93 |     |      */
  94 |     |     function _checkRole(bytes32 role, address account) internal view virtual {
  95 | *   |         if (!hasRole(role, account)) {
  96 |     |             revert AccessControlUnauthorizedAccount(account, role);
  97 |     |         }
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
 102 |     |      * {revokeRole}.
 103 |     |      *
 104 |     |      * To change a role's admin, use {_setRoleAdmin}.
 105 |     |      */
 106 |     |     function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {
 107 |     |         return _roles[role].adminRole;
 108 |     |     }
 109 |     | 
 110 |     |     /**
 111 |     |      * @dev Grants `role` to `account`.
 112 |     |      *
 113 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
 114 |     |      * event.
 115 |     |      *
 116 |     |      * Requirements:
 117 |     |      *
 118 |     |      * - the caller must have ``role``'s admin role.
 119 |     |      *
 120 |     |      * May emit a {RoleGranted} event.
 121 |     |      */
 122 |     |     function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 123 |     |         _grantRole(role, account);
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev Revokes `role` from `account`.
 128 |     |      *
 129 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
 130 |     |      *
 131 |     |      * Requirements:
 132 |     |      *
 133 |     |      * - the caller must have ``role``'s admin role.
 134 |     |      *
 135 |     |      * May emit a {RoleRevoked} event.
 136 |     |      */
 137 |     |     function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {
 138 |     |         _revokeRole(role, account);
 139 |     |     }
 140 |     | 
 141 |     |     /**
 142 |     |      * @dev Revokes `role` from the calling account.
 143 |     |      *
 144 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
 145 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
 146 |     |      * if they are compromised (such as when a trusted device is misplaced).
 147 |     |      *
 148 |     |      * If the calling account had been revoked `role`, emits a {RoleRevoked}
 149 |     |      * event.
 150 |     |      *
 151 |     |      * Requirements:
 152 |     |      *
 153 |     |      * - the caller must be `callerConfirmation`.
 154 |     |      *
 155 |     |      * May emit a {RoleRevoked} event.
 156 |     |      */
 157 |     |     function renounceRole(bytes32 role, address callerConfirmation) public virtual {
 158 |     |         if (callerConfirmation != _msgSender()) {
 159 |     |             revert AccessControlBadConfirmation();
 160 |     |         }
 161 |     | 
 162 |     |         _revokeRole(role, callerConfirmation);
 163 |     |     }
 164 |     | 
 165 |     |     /**
 166 |     |      * @dev Sets `adminRole` as ``role``'s admin role.
 167 |     |      *
 168 |     |      * Emits a {RoleAdminChanged} event.
 169 |     |      */
 170 |     |     function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
 171 |     |         bytes32 previousAdminRole = getRoleAdmin(role);
 172 |     |         _roles[role].adminRole = adminRole;
 173 |     |         emit RoleAdminChanged(role, previousAdminRole, adminRole);
 174 |     |     }
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.
 178 |     |      *
 179 |     |      * Internal function without access restriction.
 180 |     |      *
 181 |     |      * May emit a {RoleGranted} event.
 182 |     |      */
 183 | *   |     function _grantRole(bytes32 role, address account) internal virtual returns (bool) {
 184 |     |         if (!hasRole(role, account)) {
 185 | *   |             _roles[role].hasRole[account] = true;
 186 | *   |             emit RoleGranted(role, account, _msgSender());
 187 | *   |             return true;
 188 |     |         } else {
 189 |     |             return false;
 190 |     |         }
 191 |     |     }
 192 |     | 
 193 |     |     /**
 194 |     |      * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.
 195 |     |      *
 196 |     |      * Internal function without access restriction.
 197 |     |      *
 198 |     |      * May emit a {RoleRevoked} event.
 199 |     |      */
 200 |     |     function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {
 201 |     |         if (hasRole(role, account)) {
 202 |     |             _roles[role].hasRole[account] = false;
 203 |     |             emit RoleRevoked(role, account, _msgSender());
 204 |     |             return true;
 205 |     |         } else {
 206 |     |             return false;
 207 |     |         }
 208 |     |     }
 209 |     | }
 210 |     | 

/code/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev External interface of AccessControl declared to support ERC165 detection.
   8 |     |  */
   9 |     | interface IAccessControl {
  10 |     |     /**
  11 |     |      * @dev The `account` is missing a role.
  12 |     |      */
  13 |     |     error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
  14 |     | 
  15 |     |     /**
  16 |     |      * @dev The caller of a function is not the expected one.
  17 |     |      *
  18 |     |      * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.
  19 |     |      */
  20 |     |     error AccessControlBadConfirmation();
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
  24 |     |      *
  25 |     |      * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
  26 |     |      * {RoleAdminChanged} not being emitted signaling this.
  27 |     |      */
  28 |     |     event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Emitted when `account` is granted `role`.
  32 |     |      *
  33 |     |      * `sender` is the account that originated the contract call, an admin role
  34 |     |      * bearer except when using {AccessControl-_setupRole}.
  35 |     |      */
  36 |     |     event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Emitted when `account` is revoked `role`.
  40 |     |      *
  41 |     |      * `sender` is the account that originated the contract call:
  42 |     |      *   - if using `revokeRole`, it is the admin role bearer
  43 |     |      *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
  44 |     |      */
  45 |     |     event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Returns `true` if `account` has been granted `role`.
  49 |     |      */
  50 |     |     function hasRole(bytes32 role, address account) external view returns (bool);
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Returns the admin role that controls `role`. See {grantRole} and
  54 |     |      * {revokeRole}.
  55 |     |      *
  56 |     |      * To change a role's admin, use {AccessControl-_setRoleAdmin}.
  57 |     |      */
  58 |     |     function getRoleAdmin(bytes32 role) external view returns (bytes32);
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Grants `role` to `account`.
  62 |     |      *
  63 |     |      * If `account` had not been already granted `role`, emits a {RoleGranted}
  64 |     |      * event.
  65 |     |      *
  66 |     |      * Requirements:
  67 |     |      *
  68 |     |      * - the caller must have ``role``'s admin role.
  69 |     |      */
  70 |     |     function grantRole(bytes32 role, address account) external;
  71 |     | 
  72 |     |     /**
  73 |     |      * @dev Revokes `role` from `account`.
  74 |     |      *
  75 |     |      * If `account` had been granted `role`, emits a {RoleRevoked} event.
  76 |     |      *
  77 |     |      * Requirements:
  78 |     |      *
  79 |     |      * - the caller must have ``role``'s admin role.
  80 |     |      */
  81 |     |     function revokeRole(bytes32 role, address account) external;
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Revokes `role` from the calling account.
  85 |     |      *
  86 |     |      * Roles are often managed via {grantRole} and {revokeRole}: this function's
  87 |     |      * purpose is to provide a mechanism for accounts to lose their privileges
  88 |     |      * if they are compromised (such as when a trusted device is misplaced).
  89 |     |      *
  90 |     |      * If the calling account had been granted `role`, emits a {RoleRevoked}
  91 |     |      * event.
  92 |     |      *
  93 |     |      * Requirements:
  94 |     |      *
  95 |     |      * - the caller must be `callerConfirmation`.
  96 |     |      */
  97 |     |     function renounceRole(bytes32 role, address callerConfirmation) external;
  98 |     | }
  99 |     | 

/code/lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "../token/ERC20/IERC20.sol";
   7 |     | import {IERC20Metadata} from "../token/ERC20/extensions/IERC20Metadata.sol";
   8 |     | 
   9 |     | /**
  10 |     |  * @dev Interface of the ERC4626 "Tokenized Vault Standard", as defined in
  11 |     |  * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].
  12 |     |  */
  13 |     | interface IERC4626 is IERC20, IERC20Metadata {
  14 |     |     event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);
  15 |     | 
  16 |     |     event Withdraw(
  17 |     |         address indexed sender,
  18 |     |         address indexed receiver,
  19 |     |         address indexed owner,
  20 |     |         uint256 assets,
  21 |     |         uint256 shares
  22 |     |     );
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.
  26 |     |      *
  27 |     |      * - MUST be an ERC-20 token contract.
  28 |     |      * - MUST NOT revert.
  29 |     |      */
  30 |     |     function asset() external view returns (address assetTokenAddress);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Returns the total amount of the underlying asset that is “managed” by Vault.
  34 |     |      *
  35 |     |      * - SHOULD include any compounding that occurs from yield.
  36 |     |      * - MUST be inclusive of any fees that are charged against assets in the Vault.
  37 |     |      * - MUST NOT revert.
  38 |     |      */
  39 |     |     function totalAssets() external view returns (uint256 totalManagedAssets);
  40 |     | 
  41 |     |     /**
  42 |     |      * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal
  43 |     |      * scenario where all the conditions are met.
  44 |     |      *
  45 |     |      * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.
  46 |     |      * - MUST NOT show any variations depending on the caller.
  47 |     |      * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.
  48 |     |      * - MUST NOT revert.
  49 |     |      *
  50 |     |      * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the
  51 |     |      * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and
  52 |     |      * from.
  53 |     |      */
  54 |     |     function convertToShares(uint256 assets) external view returns (uint256 shares);
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal
  58 |     |      * scenario where all the conditions are met.
  59 |     |      *
  60 |     |      * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.
  61 |     |      * - MUST NOT show any variations depending on the caller.
  62 |     |      * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.
  63 |     |      * - MUST NOT revert.
  64 |     |      *
  65 |     |      * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the
  66 |     |      * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and
  67 |     |      * from.
  68 |     |      */
  69 |     |     function convertToAssets(uint256 shares) external view returns (uint256 assets);
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,
  73 |     |      * through a deposit call.
  74 |     |      *
  75 |     |      * - MUST return a limited value if receiver is subject to some deposit limit.
  76 |     |      * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.
  77 |     |      * - MUST NOT revert.
  78 |     |      */
  79 |     |     function maxDeposit(address receiver) external view returns (uint256 maxAssets);
  80 |     | 
  81 |     |     /**
  82 |     |      * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given
  83 |     |      * current on-chain conditions.
  84 |     |      *
  85 |     |      * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit
  86 |     |      *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called
  87 |     |      *   in the same transaction.
  88 |     |      * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the
  89 |     |      *   deposit would be accepted, regardless if the user has enough tokens approved, etc.
  90 |     |      * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.
  91 |     |      * - MUST NOT revert.
  92 |     |      *
  93 |     |      * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in
  94 |     |      * share price or some other type of condition, meaning the depositor will lose assets by depositing.
  95 |     |      */
  96 |     |     function previewDeposit(uint256 assets) external view returns (uint256 shares);
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.
 100 |     |      *
 101 |     |      * - MUST emit the Deposit event.
 102 |     |      * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
 103 |     |      *   deposit execution, and are accounted for during deposit.
 104 |     |      * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not
 105 |     |      *   approving enough underlying tokens to the Vault contract, etc).
 106 |     |      *
 107 |     |      * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.
 108 |     |      */
 109 |     |     function deposit(uint256 assets, address receiver) external returns (uint256 shares);
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.
 113 |     |      * - MUST return a limited value if receiver is subject to some mint limit.
 114 |     |      * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.
 115 |     |      * - MUST NOT revert.
 116 |     |      */
 117 |     |     function maxMint(address receiver) external view returns (uint256 maxShares);
 118 |     | 
 119 |     |     /**
 120 |     |      * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given
 121 |     |      * current on-chain conditions.
 122 |     |      *
 123 |     |      * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call
 124 |     |      *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the
 125 |     |      *   same transaction.
 126 |     |      * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint
 127 |     |      *   would be accepted, regardless if the user has enough tokens approved, etc.
 128 |     |      * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.
 129 |     |      * - MUST NOT revert.
 130 |     |      *
 131 |     |      * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in
 132 |     |      * share price or some other type of condition, meaning the depositor will lose assets by minting.
 133 |     |      */
 134 |     |     function previewMint(uint256 shares) external view returns (uint256 assets);
 135 |     | 
 136 |     |     /**
 137 |     |      * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.
 138 |     |      *
 139 |     |      * - MUST emit the Deposit event.
 140 |     |      * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint
 141 |     |      *   execution, and are accounted for during mint.
 142 |     |      * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not
 143 |     |      *   approving enough underlying tokens to the Vault contract, etc).
 144 |     |      *
 145 |     |      * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.
 146 |     |      */
 147 |     |     function mint(uint256 shares, address receiver) external returns (uint256 assets);
 148 |     | 
 149 |     |     /**
 150 |     |      * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the
 151 |     |      * Vault, through a withdraw call.
 152 |     |      *
 153 |     |      * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.
 154 |     |      * - MUST NOT revert.
 155 |     |      */
 156 |     |     function maxWithdraw(address owner) external view returns (uint256 maxAssets);
 157 |     | 
 158 |     |     /**
 159 |     |      * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,
 160 |     |      * given current on-chain conditions.
 161 |     |      *
 162 |     |      * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw
 163 |     |      *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if
 164 |     |      *   called
 165 |     |      *   in the same transaction.
 166 |     |      * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though
 167 |     |      *   the withdrawal would be accepted, regardless if the user has enough shares, etc.
 168 |     |      * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.
 169 |     |      * - MUST NOT revert.
 170 |     |      *
 171 |     |      * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in
 172 |     |      * share price or some other type of condition, meaning the depositor will lose assets by depositing.
 173 |     |      */
 174 |     |     function previewWithdraw(uint256 assets) external view returns (uint256 shares);
 175 |     | 
 176 |     |     /**
 177 |     |      * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.
 178 |     |      *
 179 |     |      * - MUST emit the Withdraw event.
 180 |     |      * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
 181 |     |      *   withdraw execution, and are accounted for during withdraw.
 182 |     |      * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner
 183 |     |      *   not having enough shares, etc).
 184 |     |      *
 185 |     |      * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.
 186 |     |      * Those methods should be performed separately.
 187 |     |      */
 188 |     |     function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);
 189 |     | 
 190 |     |     /**
 191 |     |      * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,
 192 |     |      * through a redeem call.
 193 |     |      *
 194 |     |      * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.
 195 |     |      * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.
 196 |     |      * - MUST NOT revert.
 197 |     |      */
 198 |     |     function maxRedeem(address owner) external view returns (uint256 maxShares);
 199 |     | 
 200 |     |     /**
 201 |     |      * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,
 202 |     |      * given current on-chain conditions.
 203 |     |      *
 204 |     |      * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call
 205 |     |      *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the
 206 |     |      *   same transaction.
 207 |     |      * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the
 208 |     |      *   redemption would be accepted, regardless if the user has enough shares, etc.
 209 |     |      * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.
 210 |     |      * - MUST NOT revert.
 211 |     |      *
 212 |     |      * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in
 213 |     |      * share price or some other type of condition, meaning the depositor will lose assets by redeeming.
 214 |     |      */
 215 |     |     function previewRedeem(uint256 shares) external view returns (uint256 assets);
 216 |     | 
 217 |     |     /**
 218 |     |      * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.
 219 |     |      *
 220 |     |      * - MUST emit the Withdraw event.
 221 |     |      * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the
 222 |     |      *   redeem execution, and are accounted for during redeem.
 223 |     |      * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner
 224 |     |      *   not having enough shares, etc).
 225 |     |      *
 226 |     |      * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.
 227 |     |      * Those methods should be performed separately.
 228 |     |      */
 229 |     |     function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);
 230 |     | }
 231 |     | 

/code/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | interface IERC5267 {
  7 |     |     /**
  8 |     |      * @dev MAY be emitted to signal that the domain could have changed.
  9 |     |      */
 10 |     |     event EIP712DomainChanged();
 11 |     | 
 12 |     |     /**
 13 |     |      * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
 14 |     |      * signature.
 15 |     |      */
 16 |     |     function eip712Domain()
 17 |     |         external
 18 |     |         view
 19 |     |         returns (
 20 |     |             bytes1 fields,
 21 |     |             string memory name,
 22 |     |             string memory version,
 23 |     |             uint256 chainId,
 24 |     |             address verifyingContract,
 25 |     |             bytes32 salt,
 26 |     |             uint256[] memory extensions
 27 |     |         );
 28 |     | }
 29 |     | 

/code/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified
  8 |     |  * proxy whose upgrades are fully controlled by the current implementation.
  9 |     |  */
 10 |     | interface IERC1822Proxiable {
 11 |     |     /**
 12 |     |      * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation
 13 |     |      * address.
 14 |     |      *
 15 |     |      * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks
 16 |     |      * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this
 17 |     |      * function revert if invoked through a proxy.
 18 |     |      */
 19 |     |     function proxiableUUID() external view returns (bytes32);
 20 |     | }
 21 |     | 

/code/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)
   3 |     | pragma solidity ^0.8.20;
   4 |     | 
   5 |     | /**
   6 |     |  * @dev Standard ERC20 Errors
   7 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.
   8 |     |  */
   9 |     | interface IERC20Errors {
  10 |     |     /**
  11 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
  12 |     |      * @param sender Address whose tokens are being transferred.
  13 |     |      * @param balance Current balance for the interacting account.
  14 |     |      * @param needed Minimum amount required to perform a transfer.
  15 |     |      */
  16 |     |     error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
  17 |     | 
  18 |     |     /**
  19 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  20 |     |      * @param sender Address whose tokens are being transferred.
  21 |     |      */
  22 |     |     error ERC20InvalidSender(address sender);
  23 |     | 
  24 |     |     /**
  25 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  26 |     |      * @param receiver Address to which tokens are being transferred.
  27 |     |      */
  28 |     |     error ERC20InvalidReceiver(address receiver);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.
  32 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  33 |     |      * @param allowance Amount of tokens a `spender` is allowed to operate with.
  34 |     |      * @param needed Minimum amount required to perform a transfer.
  35 |     |      */
  36 |     |     error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
  37 |     | 
  38 |     |     /**
  39 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  40 |     |      * @param approver Address initiating an approval operation.
  41 |     |      */
  42 |     |     error ERC20InvalidApprover(address approver);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Indicates a failure with the `spender` to be approved. Used in approvals.
  46 |     |      * @param spender Address that may be allowed to operate on tokens without being their owner.
  47 |     |      */
  48 |     |     error ERC20InvalidSpender(address spender);
  49 |     | }
  50 |     | 
  51 |     | /**
  52 |     |  * @dev Standard ERC721 Errors
  53 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.
  54 |     |  */
  55 |     | interface IERC721Errors {
  56 |     |     /**
  57 |     |      * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.
  58 |     |      * Used in balance queries.
  59 |     |      * @param owner Address of the current owner of a token.
  60 |     |      */
  61 |     |     error ERC721InvalidOwner(address owner);
  62 |     | 
  63 |     |     /**
  64 |     |      * @dev Indicates a `tokenId` whose `owner` is the zero address.
  65 |     |      * @param tokenId Identifier number of a token.
  66 |     |      */
  67 |     |     error ERC721NonexistentToken(uint256 tokenId);
  68 |     | 
  69 |     |     /**
  70 |     |      * @dev Indicates an error related to the ownership over a particular token. Used in transfers.
  71 |     |      * @param sender Address whose tokens are being transferred.
  72 |     |      * @param tokenId Identifier number of a token.
  73 |     |      * @param owner Address of the current owner of a token.
  74 |     |      */
  75 |     |     error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
  79 |     |      * @param sender Address whose tokens are being transferred.
  80 |     |      */
  81 |     |     error ERC721InvalidSender(address sender);
  82 |     | 
  83 |     |     /**
  84 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
  85 |     |      * @param receiver Address to which tokens are being transferred.
  86 |     |      */
  87 |     |     error ERC721InvalidReceiver(address receiver);
  88 |     | 
  89 |     |     /**
  90 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
  91 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
  92 |     |      * @param tokenId Identifier number of a token.
  93 |     |      */
  94 |     |     error ERC721InsufficientApproval(address operator, uint256 tokenId);
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
  98 |     |      * @param approver Address initiating an approval operation.
  99 |     |      */
 100 |     |     error ERC721InvalidApprover(address approver);
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 104 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 105 |     |      */
 106 |     |     error ERC721InvalidOperator(address operator);
 107 |     | }
 108 |     | 
 109 |     | /**
 110 |     |  * @dev Standard ERC1155 Errors
 111 |     |  * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.
 112 |     |  */
 113 |     | interface IERC1155Errors {
 114 |     |     /**
 115 |     |      * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.
 116 |     |      * @param sender Address whose tokens are being transferred.
 117 |     |      * @param balance Current balance for the interacting account.
 118 |     |      * @param needed Minimum amount required to perform a transfer.
 119 |     |      * @param tokenId Identifier number of a token.
 120 |     |      */
 121 |     |     error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
 122 |     | 
 123 |     |     /**
 124 |     |      * @dev Indicates a failure with the token `sender`. Used in transfers.
 125 |     |      * @param sender Address whose tokens are being transferred.
 126 |     |      */
 127 |     |     error ERC1155InvalidSender(address sender);
 128 |     | 
 129 |     |     /**
 130 |     |      * @dev Indicates a failure with the token `receiver`. Used in transfers.
 131 |     |      * @param receiver Address to which tokens are being transferred.
 132 |     |      */
 133 |     |     error ERC1155InvalidReceiver(address receiver);
 134 |     | 
 135 |     |     /**
 136 |     |      * @dev Indicates a failure with the `operator`’s approval. Used in transfers.
 137 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 138 |     |      * @param owner Address of the current owner of a token.
 139 |     |      */
 140 |     |     error ERC1155MissingApprovalForAll(address operator, address owner);
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.
 144 |     |      * @param approver Address initiating an approval operation.
 145 |     |      */
 146 |     |     error ERC1155InvalidApprover(address approver);
 147 |     | 
 148 |     |     /**
 149 |     |      * @dev Indicates a failure with the `operator` to be approved. Used in approvals.
 150 |     |      * @param operator Address that may be allowed to operate on tokens without being their owner.
 151 |     |      */
 152 |     |     error ERC1155InvalidOperator(address operator);
 153 |     | 
 154 |     |     /**
 155 |     |      * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.
 156 |     |      * Used in batch transfers.
 157 |     |      * @param idsLength Length of the array of token identifiers
 158 |     |      * @param valuesLength Length of the array of token amounts
 159 |     |      */
 160 |     |     error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
 161 |     | }
 162 |     | 

/code/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IBeacon} from "../beacon/IBeacon.sol";
   7 |     | import {Address} from "../../utils/Address.sol";
   8 |     | import {StorageSlot} from "../../utils/StorageSlot.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev This abstract contract provides getters and event emitting update functions for
  12 |     |  * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.
  13 |     |  */
  14 |     | library ERC1967Utils {
  15 |     |     // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.
  16 |     |     // This will be fixed in Solidity 0.8.21. At that point we should remove these events.
  17 |     |     /**
  18 |     |      * @dev Emitted when the implementation is upgraded.
  19 |     |      */
  20 |     |     event Upgraded(address indexed implementation);
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Emitted when the admin account has changed.
  24 |     |      */
  25 |     |     event AdminChanged(address previousAdmin, address newAdmin);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Emitted when the beacon is changed.
  29 |     |      */
  30 |     |     event BeaconUpgraded(address indexed beacon);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Storage slot with the address of the current implementation.
  34 |     |      * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1.
  35 |     |      */
  36 |     |     // solhint-disable-next-line private-vars-leading-underscore
  37 |     |     bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
  38 |     | 
  39 |     |     /**
  40 |     |      * @dev The `implementation` of the proxy is invalid.
  41 |     |      */
  42 |     |     error ERC1967InvalidImplementation(address implementation);
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev The `admin` of the proxy is invalid.
  46 |     |      */
  47 |     |     error ERC1967InvalidAdmin(address admin);
  48 |     | 
  49 |     |     /**
  50 |     |      * @dev The `beacon` of the proxy is invalid.
  51 |     |      */
  52 |     |     error ERC1967InvalidBeacon(address beacon);
  53 |     | 
  54 |     |     /**
  55 |     |      * @dev An upgrade function sees `msg.value > 0` that may be lost.
  56 |     |      */
  57 |     |     error ERC1967NonPayable();
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Returns the current implementation address.
  61 |     |      */
  62 |     |     function getImplementation() internal view returns (address) {
  63 |     |         return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Stores a new address in the EIP1967 implementation slot.
  68 |     |      */
  69 |     |     function _setImplementation(address newImplementation) private {
  70 |     |         if (newImplementation.code.length == 0) {
  71 |     |             revert ERC1967InvalidImplementation(newImplementation);
  72 |     |         }
  73 |     |         StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev Performs implementation upgrade with additional setup call if data is nonempty.
  78 |     |      * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected
  79 |     |      * to avoid stuck value in the contract.
  80 |     |      *
  81 |     |      * Emits an {IERC1967-Upgraded} event.
  82 |     |      */
  83 |     |     function upgradeToAndCall(address newImplementation, bytes memory data) internal {
  84 |     |         _setImplementation(newImplementation);
  85 |     |         emit Upgraded(newImplementation);
  86 |     | 
  87 |     |         if (data.length > 0) {
  88 |     |             Address.functionDelegateCall(newImplementation, data);
  89 |     |         } else {
  90 |     |             _checkNonPayable();
  91 |     |         }
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev Storage slot with the admin of the contract.
  96 |     |      * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1.
  97 |     |      */
  98 |     |     // solhint-disable-next-line private-vars-leading-underscore
  99 |     |     bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev Returns the current admin.
 103 |     |      *
 104 |     |      * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using
 105 |     |      * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.
 106 |     |      * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`
 107 |     |      */
 108 |     |     function getAdmin() internal view returns (address) {
 109 |     |         return StorageSlot.getAddressSlot(ADMIN_SLOT).value;
 110 |     |     }
 111 |     | 
 112 |     |     /**
 113 |     |      * @dev Stores a new address in the EIP1967 admin slot.
 114 |     |      */
 115 |     |     function _setAdmin(address newAdmin) private {
 116 |     |         if (newAdmin == address(0)) {
 117 |     |             revert ERC1967InvalidAdmin(address(0));
 118 |     |         }
 119 |     |         StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev Changes the admin of the proxy.
 124 |     |      *
 125 |     |      * Emits an {IERC1967-AdminChanged} event.
 126 |     |      */
 127 |     |     function changeAdmin(address newAdmin) internal {
 128 |     |         emit AdminChanged(getAdmin(), newAdmin);
 129 |     |         _setAdmin(newAdmin);
 130 |     |     }
 131 |     | 
 132 |     |     /**
 133 |     |      * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.
 134 |     |      * This is the keccak-256 hash of "eip1967.proxy.beacon" subtracted by 1.
 135 |     |      */
 136 |     |     // solhint-disable-next-line private-vars-leading-underscore
 137 |     |     bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;
 138 |     | 
 139 |     |     /**
 140 |     |      * @dev Returns the current beacon.
 141 |     |      */
 142 |     |     function getBeacon() internal view returns (address) {
 143 |     |         return StorageSlot.getAddressSlot(BEACON_SLOT).value;
 144 |     |     }
 145 |     | 
 146 |     |     /**
 147 |     |      * @dev Stores a new beacon in the EIP1967 beacon slot.
 148 |     |      */
 149 |     |     function _setBeacon(address newBeacon) private {
 150 |     |         if (newBeacon.code.length == 0) {
 151 |     |             revert ERC1967InvalidBeacon(newBeacon);
 152 |     |         }
 153 |     | 
 154 |     |         StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;
 155 |     | 
 156 |     |         address beaconImplementation = IBeacon(newBeacon).implementation();
 157 |     |         if (beaconImplementation.code.length == 0) {
 158 |     |             revert ERC1967InvalidImplementation(beaconImplementation);
 159 |     |         }
 160 |     |     }
 161 |     | 
 162 |     |     /**
 163 |     |      * @dev Change the beacon and trigger a setup call if data is nonempty.
 164 |     |      * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected
 165 |     |      * to avoid stuck value in the contract.
 166 |     |      *
 167 |     |      * Emits an {IERC1967-BeaconUpgraded} event.
 168 |     |      *
 169 |     |      * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since
 170 |     |      * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for
 171 |     |      * efficiency.
 172 |     |      */
 173 |     |     function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {
 174 |     |         _setBeacon(newBeacon);
 175 |     |         emit BeaconUpgraded(newBeacon);
 176 |     | 
 177 |     |         if (data.length > 0) {
 178 |     |             Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);
 179 |     |         } else {
 180 |     |             _checkNonPayable();
 181 |     |         }
 182 |     |     }
 183 |     | 
 184 |     |     /**
 185 |     |      * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract
 186 |     |      * if an upgrade doesn't perform an initialization call.
 187 |     |      */
 188 |     |     function _checkNonPayable() private {
 189 |     |         if (msg.value > 0) {
 190 |     |             revert ERC1967NonPayable();
 191 |     |         }
 192 |     |     }
 193 |     | }
 194 |     | 

/code/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev This is the interface that {BeaconProxy} expects of its beacon.
  8 |     |  */
  9 |     | interface IBeacon {
 10 |     |     /**
 11 |     |      * @dev Must return an address that can be used as a delegate call target.
 12 |     |      *
 13 |     |      * {UpgradeableBeacon} will check that this address is a contract.
 14 |     |      */
 15 |     |     function implementation() external view returns (address);
 16 |     | }
 17 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "./IERC20.sol";
   7 |     | import {IERC20Metadata} from "./extensions/IERC20Metadata.sol";
   8 |     | import {Context} from "../../utils/Context.sol";
   9 |     | import {IERC20Errors} from "../../interfaces/draft-IERC6093.sol";
  10 |     | 
  11 |     | /**
  12 |     |  * @dev Implementation of the {IERC20} interface.
  13 |     |  *
  14 |     |  * This implementation is agnostic to the way tokens are created. This means
  15 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC20
  27 |     |  * applications.
  28 |     |  *
  29 |     |  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
  30 |     |  * This allows applications to reconstruct the allowance for all accounts just
  31 |     |  * by listening to said events. Other implementations of the EIP may not emit
  32 |     |  * these events, as it isn't required by the specification.
  33 |     |  */
  34 |     | abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
  35 |     |     mapping(address account => uint256) private _balances;
  36 |     | 
  37 |     |     mapping(address account => mapping(address spender => uint256)) private _allowances;
  38 |     | 
  39 |     |     uint256 private _totalSupply;
  40 |     | 
  41 |     |     string private _name;
  42 |     |     string private _symbol;
  43 |     | 
  44 |     |     /**
  45 |     |      * @dev Sets the values for {name} and {symbol}.
  46 |     |      *
  47 |     |      * All two of these values are immutable: they can only be set once during
  48 |     |      * construction.
  49 |     |      */
  50 |     |     constructor(string memory name_, string memory symbol_) {
  51 | *   |         _name = name_;
  52 | *   |         _symbol = symbol_;
  53 |     |     }
  54 |     | 
  55 |     |     /**
  56 |     |      * @dev Returns the name of the token.
  57 |     |      */
  58 |     |     function name() public view virtual returns (string memory) {
  59 |     |         return _name;
  60 |     |     }
  61 |     | 
  62 |     |     /**
  63 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  64 |     |      * name.
  65 |     |      */
  66 |     |     function symbol() public view virtual returns (string memory) {
  67 |     |         return _symbol;
  68 |     |     }
  69 |     | 
  70 |     |     /**
  71 |     |      * @dev Returns the number of decimals used to get its user representation.
  72 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  73 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  74 |     |      *
  75 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  76 |     |      * Ether and Wei. This is the default value returned by this function, unless
  77 |     |      * it's overridden.
  78 |     |      *
  79 |     |      * NOTE: This information is only used for _display_ purposes: it in
  80 |     |      * no way affects any of the arithmetic of the contract, including
  81 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  82 |     |      */
  83 |     |     function decimals() public view virtual returns (uint8) {
  84 |     |         return 18;
  85 |     |     }
  86 |     | 
  87 |     |     /**
  88 |     |      * @dev See {IERC20-totalSupply}.
  89 |     |      */
  90 |     |     function totalSupply() public view virtual returns (uint256) {
  91 |     |         return _totalSupply;
  92 |     |     }
  93 |     | 
  94 |     |     /**
  95 |     |      * @dev See {IERC20-balanceOf}.
  96 |     |      */
  97 |     |     function balanceOf(address account) public view virtual returns (uint256) {
  98 |     |         return _balances[account];
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev See {IERC20-transfer}.
 103 |     |      *
 104 |     |      * Requirements:
 105 |     |      *
 106 |     |      * - `to` cannot be the zero address.
 107 |     |      * - the caller must have a balance of at least `value`.
 108 |     |      */
 109 |     |     function transfer(address to, uint256 value) public virtual returns (bool) {
 110 |     |         address owner = _msgSender();
 111 |     |         _transfer(owner, to, value);
 112 |     |         return true;
 113 |     |     }
 114 |     | 
 115 |     |     /**
 116 |     |      * @dev See {IERC20-allowance}.
 117 |     |      */
 118 |     |     function allowance(address owner, address spender) public view virtual returns (uint256) {
 119 |     |         return _allowances[owner][spender];
 120 |     |     }
 121 |     | 
 122 |     |     /**
 123 |     |      * @dev See {IERC20-approve}.
 124 |     |      *
 125 |     |      * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on
 126 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 127 |     |      *
 128 |     |      * Requirements:
 129 |     |      *
 130 |     |      * - `spender` cannot be the zero address.
 131 |     |      */
 132 |     |     function approve(address spender, uint256 value) public virtual returns (bool) {
 133 |     |         address owner = _msgSender();
 134 |     |         _approve(owner, spender, value);
 135 |     |         return true;
 136 |     |     }
 137 |     | 
 138 |     |     /**
 139 |     |      * @dev See {IERC20-transferFrom}.
 140 |     |      *
 141 |     |      * Emits an {Approval} event indicating the updated allowance. This is not
 142 |     |      * required by the EIP. See the note at the beginning of {ERC20}.
 143 |     |      *
 144 |     |      * NOTE: Does not update the allowance if the current allowance
 145 |     |      * is the maximum `uint256`.
 146 |     |      *
 147 |     |      * Requirements:
 148 |     |      *
 149 |     |      * - `from` and `to` cannot be the zero address.
 150 |     |      * - `from` must have a balance of at least `value`.
 151 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 152 |     |      * `value`.
 153 |     |      */
 154 |     |     function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
 155 |     |         address spender = _msgSender();
 156 |     |         _spendAllowance(from, spender, value);
 157 |     |         _transfer(from, to, value);
 158 |     |         return true;
 159 |     |     }
 160 |     | 
 161 |     |     /**
 162 |     |      * @dev Moves a `value` amount of tokens from `from` to `to`.
 163 |     |      *
 164 |     |      * This internal function is equivalent to {transfer}, and can be used to
 165 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 166 |     |      *
 167 |     |      * Emits a {Transfer} event.
 168 |     |      *
 169 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 170 |     |      */
 171 |     |     function _transfer(address from, address to, uint256 value) internal {
 172 |     |         if (from == address(0)) {
 173 |     |             revert ERC20InvalidSender(address(0));
 174 |     |         }
 175 |     |         if (to == address(0)) {
 176 |     |             revert ERC20InvalidReceiver(address(0));
 177 |     |         }
 178 |     |         _update(from, to, value);
 179 |     |     }
 180 |     | 
 181 |     |     /**
 182 |     |      * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`
 183 |     |      * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding
 184 |     |      * this function.
 185 |     |      *
 186 |     |      * Emits a {Transfer} event.
 187 |     |      */
 188 |     |     function _update(address from, address to, uint256 value) internal virtual {
 189 |     |         if (from == address(0)) {
 190 |     |             // Overflow check required: The rest of the code assumes that totalSupply never overflows
 191 | *   |             _totalSupply += value;
 192 |     |         } else {
 193 |     |             uint256 fromBalance = _balances[from];
 194 | *   |             if (fromBalance < value) {
 195 | *   |                 revert ERC20InsufficientBalance(from, fromBalance, value);
 196 |     |             }
 197 |     |             unchecked {
 198 |     |                 // Overflow not possible: value <= fromBalance <= totalSupply.
 199 |     |                 _balances[from] = fromBalance - value;
 200 |     |             }
 201 |     |         }
 202 |     | 
 203 |     |         if (to == address(0)) {
 204 |     |             unchecked {
 205 |     |                 // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
 206 | *   |                 _totalSupply -= value;
 207 |     |             }
 208 |     |         } else {
 209 |     |             unchecked {
 210 |     |                 // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
 211 |     |                 _balances[to] += value;
 212 |     |             }
 213 |     |         }
 214 |     | 
 215 | *   |         emit Transfer(from, to, value);
 216 |     |     }
 217 |     | 
 218 |     |     /**
 219 |     |      * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).
 220 |     |      * Relies on the `_update` mechanism
 221 |     |      *
 222 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 223 |     |      *
 224 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead.
 225 |     |      */
 226 |     |     function _mint(address account, uint256 value) internal {
 227 | *   |         if (account == address(0)) {
 228 |     |             revert ERC20InvalidReceiver(address(0));
 229 |     |         }
 230 |     |         _update(address(0), account, value);
 231 |     |     }
 232 |     | 
 233 |     |     /**
 234 |     |      * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.
 235 |     |      * Relies on the `_update` mechanism.
 236 |     |      *
 237 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 238 |     |      *
 239 |     |      * NOTE: This function is not virtual, {_update} should be overridden instead
 240 |     |      */
 241 |     |     function _burn(address account, uint256 value) internal {
 242 | *   |         if (account == address(0)) {
 243 |     |             revert ERC20InvalidSender(address(0));
 244 |     |         }
 245 |     |         _update(account, address(0), value);
 246 |     |     }
 247 |     | 
 248 |     |     /**
 249 |     |      * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.
 250 |     |      *
 251 |     |      * This internal function is equivalent to `approve`, and can be used to
 252 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 253 |     |      *
 254 |     |      * Emits an {Approval} event.
 255 |     |      *
 256 |     |      * Requirements:
 257 |     |      *
 258 |     |      * - `owner` cannot be the zero address.
 259 |     |      * - `spender` cannot be the zero address.
 260 |     |      *
 261 |     |      * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.
 262 |     |      */
 263 |     |     function _approve(address owner, address spender, uint256 value) internal {
 264 |     |         _approve(owner, spender, value, true);
 265 |     |     }
 266 |     | 
 267 |     |     /**
 268 |     |      * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.
 269 |     |      *
 270 |     |      * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by
 271 |     |      * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any
 272 |     |      * `Approval` event during `transferFrom` operations.
 273 |     |      *
 274 |     |      * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to
 275 |     |      * true using the following override:
 276 |     |      * ```
 277 |     |      * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {
 278 |     |      *     super._approve(owner, spender, value, true);
 279 |     |      * }
 280 |     |      * ```
 281 |     |      *
 282 |     |      * Requirements are the same as {_approve}.
 283 |     |      */
 284 |     |     function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
 285 |     |         if (owner == address(0)) {
 286 |     |             revert ERC20InvalidApprover(address(0));
 287 |     |         }
 288 |     |         if (spender == address(0)) {
 289 |     |             revert ERC20InvalidSpender(address(0));
 290 |     |         }
 291 |     |         _allowances[owner][spender] = value;
 292 |     |         if (emitEvent) {
 293 |     |             emit Approval(owner, spender, value);
 294 |     |         }
 295 |     |     }
 296 |     | 
 297 |     |     /**
 298 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `value`.
 299 |     |      *
 300 |     |      * Does not update the allowance value in case of infinite allowance.
 301 |     |      * Revert if not enough allowance is available.
 302 |     |      *
 303 |     |      * Does not emit an {Approval} event.
 304 |     |      */
 305 |     |     function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
 306 |     |         uint256 currentAllowance = allowance(owner, spender);
 307 |     |         if (currentAllowance != type(uint256).max) {
 308 |     |             if (currentAllowance < value) {
 309 |     |                 revert ERC20InsufficientAllowance(spender, currentAllowance, value);
 310 |     |             }
 311 |     |             unchecked {
 312 |     |                 _approve(owner, spender, currentAllowance - value, false);
 313 |     |             }
 314 |     |         }
 315 |     |     }
 316 |     | }
 317 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 standard as defined in the EIP.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the value of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the value of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves a `value` amount of tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 value) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
 54 |     |      * caller's tokens.
 55 |     |      *
 56 |     |      * Returns a boolean value indicating whether the operation succeeded.
 57 |     |      *
 58 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 59 |     |      * that someone may use both the old and the new allowance by unfortunate
 60 |     |      * transaction ordering. One possible solution to mitigate this race
 61 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 62 |     |      * desired value afterwards:
 63 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 64 |     |      *
 65 |     |      * Emits an {Approval} event.
 66 |     |      */
 67 |     |     function approve(address spender, uint256 value) external returns (bool);
 68 |     | 
 69 |     |     /**
 70 |     |      * @dev Moves a `value` amount of tokens from `from` to `to` using the
 71 |     |      * allowance mechanism. `value` is then deducted from the caller's
 72 |     |      * allowance.
 73 |     |      *
 74 |     |      * Returns a boolean value indicating whether the operation succeeded.
 75 |     |      *
 76 |     |      * Emits a {Transfer} event.
 77 |     |      */
 78 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool);
 79 |     | }
 80 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20Permit} from "./IERC20Permit.sol";
  7 |     | import {ERC20} from "../ERC20.sol";
  8 |     | import {ECDSA} from "../../../utils/cryptography/ECDSA.sol";
  9 |     | import {EIP712} from "../../../utils/cryptography/EIP712.sol";
 10 |     | import {Nonces} from "../../../utils/Nonces.sol";
 11 |     | 
 12 |     | /**
 13 |     |  * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 14 |     |  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 15 |     |  *
 16 |     |  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 17 |     |  * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't
 18 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 19 |     |  */
 20 |     | abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {
 21 |     |     bytes32 private constant PERMIT_TYPEHASH =
 22 |     |         keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Permit deadline has expired.
 26 |     |      */
 27 |     |     error ERC2612ExpiredSignature(uint256 deadline);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Mismatched signature.
 31 |     |      */
 32 |     |     error ERC2612InvalidSigner(address signer, address owner);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.
 36 |     |      *
 37 |     |      * It's a good idea to use the same `name` that is defined as the ERC20 token name.
 38 |     |      */
 39 |     |     constructor(string memory name) EIP712(name, "1") {}
 40 |     | 
 41 |     |     /**
 42 |     |      * @inheritdoc IERC20Permit
 43 |     |      */
 44 |     |     function permit(
 45 |     |         address owner,
 46 |     |         address spender,
 47 |     |         uint256 value,
 48 |     |         uint256 deadline,
 49 |     |         uint8 v,
 50 |     |         bytes32 r,
 51 |     |         bytes32 s
 52 |     |     ) public virtual {
 53 |     |         if (block.timestamp > deadline) {
 54 |     |             revert ERC2612ExpiredSignature(deadline);
 55 |     |         }
 56 |     | 
 57 |     |         bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));
 58 |     | 
 59 |     |         bytes32 hash = _hashTypedDataV4(structHash);
 60 |     | 
 61 |     |         address signer = ECDSA.recover(hash, v, r, s);
 62 |     |         if (signer != owner) {
 63 |     |             revert ERC2612InvalidSigner(signer, owner);
 64 |     |         }
 65 |     | 
 66 |     |         _approve(owner, spender, value);
 67 |     |     }
 68 |     | 
 69 |     |     /**
 70 |     |      * @inheritdoc IERC20Permit
 71 |     |      */
 72 |     |     function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {
 73 |     |         return super.nonces(owner);
 74 |     |     }
 75 |     | 
 76 |     |     /**
 77 |     |      * @inheritdoc IERC20Permit
 78 |     |      */
 79 |     |     // solhint-disable-next-line func-name-mixedcase
 80 |     |     function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {
 81 |     |         return _domainSeparatorV4();
 82 |     |     }
 83 |     | }
 84 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC20} from "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC20 standard.
 10 |     |  */
 11 |     | interface IERC20Metadata is IERC20 {
 12 |     |     /**
 13 |     |      * @dev Returns the name of the token.
 14 |     |      */
 15 |     |     function name() external view returns (string memory);
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the symbol of the token.
 19 |     |      */
 20 |     |     function symbol() external view returns (string memory);
 21 |     | 
 22 |     |     /**
 23 |     |      * @dev Returns the decimals places of the token.
 24 |     |      */
 25 |     |     function decimals() external view returns (uint8);
 26 |     | }
 27 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
  8 |     |  * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
  9 |     |  *
 10 |     |  * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 11 |     |  * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 12 |     |  * need to send a transaction, and thus is not required to hold Ether at all.
 13 |     |  *
 14 |     |  * ==== Security Considerations
 15 |     |  *
 16 |     |  * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 17 |     |  * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 18 |     |  * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 19 |     |  * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 20 |     |  * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 21 |     |  * generally recommended is:
 22 |     |  *
 23 |     |  * ```solidity
 24 |     |  * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 25 |     |  *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 26 |     |  *     doThing(..., value);
 27 |     |  * }
 28 |     |  *
 29 |     |  * function doThing(..., uint256 value) public {
 30 |     |  *     token.safeTransferFrom(msg.sender, address(this), value);
 31 |     |  *     ...
 32 |     |  * }
 33 |     |  * ```
 34 |     |  *
 35 |     |  * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 36 |     |  * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 37 |     |  * {SafeERC20-safeTransferFrom}).
 38 |     |  *
 39 |     |  * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 40 |     |  * contracts should have entry points that don't rely on permit.
 41 |     |  */
 42 |     | interface IERC20Permit {
 43 |     |     /**
 44 |     |      * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
 45 |     |      * given ``owner``'s signed approval.
 46 |     |      *
 47 |     |      * IMPORTANT: The same issues {IERC20-approve} has related to transaction
 48 |     |      * ordering also apply here.
 49 |     |      *
 50 |     |      * Emits an {Approval} event.
 51 |     |      *
 52 |     |      * Requirements:
 53 |     |      *
 54 |     |      * - `spender` cannot be the zero address.
 55 |     |      * - `deadline` must be a timestamp in the future.
 56 |     |      * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
 57 |     |      * over the EIP712-formatted function arguments.
 58 |     |      * - the signature must use ``owner``'s current nonce (see {nonces}).
 59 |     |      *
 60 |     |      * For more information on the signature format, see the
 61 |     |      * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
 62 |     |      * section].
 63 |     |      *
 64 |     |      * CAUTION: See Security Considerations above.
 65 |     |      */
 66 |     |     function permit(
 67 |     |         address owner,
 68 |     |         address spender,
 69 |     |         uint256 value,
 70 |     |         uint256 deadline,
 71 |     |         uint8 v,
 72 |     |         bytes32 r,
 73 |     |         bytes32 s
 74 |     |     ) external;
 75 |     | 
 76 |     |     /**
 77 |     |      * @dev Returns the current nonce for `owner`. This value must be
 78 |     |      * included whenever a signature is generated for {permit}.
 79 |     |      *
 80 |     |      * Every successful call to {permit} increases ``owner``'s nonce by one. This
 81 |     |      * prevents a signature from being used multiple times.
 82 |     |      */
 83 |     |     function nonces(address owner) external view returns (uint256);
 84 |     | 
 85 |     |     /**
 86 |     |      * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
 87 |     |      */
 88 |     |     // solhint-disable-next-line func-name-mixedcase
 89 |     |     function DOMAIN_SEPARATOR() external view returns (bytes32);
 90 |     | }
 91 |     | 

/code/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {IERC20} from "../IERC20.sol";
   7 |     | import {IERC20Permit} from "../extensions/IERC20Permit.sol";
   8 |     | import {Address} from "../../../utils/Address.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @title SafeERC20
  12 |     |  * @dev Wrappers around ERC20 operations that throw on failure (when the token
  13 |     |  * contract returns false). Tokens that return no value (and instead revert or
  14 |     |  * throw on failure) are also supported, non-reverting calls are assumed to be
  15 |     |  * successful.
  16 |     |  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
  17 |     |  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
  18 |     |  */
  19 |     | library SafeERC20 {
  20 |     |     using Address for address;
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev An operation with an ERC20 token failed.
  24 |     |      */
  25 |     |     error SafeERC20FailedOperation(address token);
  26 |     | 
  27 |     |     /**
  28 |     |      * @dev Indicates a failed `decreaseAllowance` request.
  29 |     |      */
  30 |     |     error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);
  31 |     | 
  32 |     |     /**
  33 |     |      * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
  34 |     |      * non-reverting calls are assumed to be successful.
  35 |     |      */
  36 | *   |     function safeTransfer(IERC20 token, address to, uint256 value) internal {
  37 | *   |         _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
  38 |     |     }
  39 |     | 
  40 |     |     /**
  41 |     |      * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
  42 |     |      * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
  43 |     |      */
  44 |     |     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
  45 | *   |         _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
  46 |     |     }
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
  50 |     |      * non-reverting calls are assumed to be successful.
  51 |     |      */
  52 |     |     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
  53 |     |         uint256 oldAllowance = token.allowance(address(this), spender);
  54 |     |         forceApprove(token, spender, oldAllowance + value);
  55 |     |     }
  56 |     | 
  57 |     |     /**
  58 |     |      * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
  59 |     |      * value, non-reverting calls are assumed to be successful.
  60 |     |      */
  61 |     |     function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
  62 |     |         unchecked {
  63 |     |             uint256 currentAllowance = token.allowance(address(this), spender);
  64 |     |             if (currentAllowance < requestedDecrease) {
  65 |     |                 revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
  66 |     |             }
  67 |     |             forceApprove(token, spender, currentAllowance - requestedDecrease);
  68 |     |         }
  69 |     |     }
  70 |     | 
  71 |     |     /**
  72 |     |      * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
  73 |     |      * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
  74 |     |      * to be set to zero before setting it to a non-zero value, such as USDT.
  75 |     |      */
  76 |     |     function forceApprove(IERC20 token, address spender, uint256 value) internal {
  77 |     |         bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));
  78 |     | 
  79 |     |         if (!_callOptionalReturnBool(token, approvalCall)) {
  80 |     |             _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
  81 |     |             _callOptionalReturn(token, approvalCall);
  82 |     |         }
  83 |     |     }
  84 |     | 
  85 |     |     /**
  86 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
  87 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
  88 |     |      * @param token The token targeted by the call.
  89 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
  90 |     |      */
  91 | *   |     function _callOptionalReturn(IERC20 token, bytes memory data) private {
  92 |     |         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
  93 |     |         // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
  94 |     |         // the target address contains contract code and also asserts for success in the low-level call.
  95 |     | 
  96 |     |         bytes memory returndata = address(token).functionCall(data);
  97 | *   |         if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
  98 |     |             revert SafeERC20FailedOperation(address(token));
  99 |     |         }
 100 |     |     }
 101 |     | 
 102 |     |     /**
 103 |     |      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
 104 |     |      * on the return value: the return value is optional (but if data is returned, it must not be false).
 105 |     |      * @param token The token targeted by the call.
 106 |     |      * @param data The call data (encoded using abi.encode or one of its variants).
 107 |     |      *
 108 |     |      * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
 109 |     |      */
 110 |     |     function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
 111 |     |         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
 112 |     |         // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
 113 |     |         // and not revert is the subcall reverts.
 114 |     | 
 115 |     |         (bool success, bytes memory returndata) = address(token).call(data);
 116 |     |         return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
 117 |     |     }
 118 |     | }
 119 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/Address.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Collection of functions related to the address type
   8 |     |  */
   9 |     | library Address {
  10 |     |     /**
  11 |     |      * @dev The ETH balance of the account is not enough to perform the operation.
  12 |     |      */
  13 |     |     error AddressInsufficientBalance(address account);
  14 |     | 
  15 |     |     /**
  16 |     |      * @dev There's no code at `target` (it is not a contract).
  17 |     |      */
  18 |     |     error AddressEmptyCode(address target);
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev A call to an address target failed. The target may have reverted.
  22 |     |      */
  23 |     |     error FailedInnerCall();
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
  27 |     |      * `recipient`, forwarding all available gas and reverting on errors.
  28 |     |      *
  29 |     |      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
  30 |     |      * of certain opcodes, possibly making contracts go over the 2300 gas limit
  31 |     |      * imposed by `transfer`, making them unable to receive funds via
  32 |     |      * `transfer`. {sendValue} removes this limitation.
  33 |     |      *
  34 |     |      * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
  35 |     |      *
  36 |     |      * IMPORTANT: because control is transferred to `recipient`, care must be
  37 |     |      * taken to not create reentrancy vulnerabilities. Consider using
  38 |     |      * {ReentrancyGuard} or the
  39 |     |      * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
  40 |     |      */
  41 |     |     function sendValue(address payable recipient, uint256 amount) internal {
  42 |     |         if (address(this).balance < amount) {
  43 |     |             revert AddressInsufficientBalance(address(this));
  44 |     |         }
  45 |     | 
  46 |     |         (bool success, ) = recipient.call{value: amount}("");
  47 |     |         if (!success) {
  48 |     |             revert FailedInnerCall();
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     /**
  53 |     |      * @dev Performs a Solidity function call using a low level `call`. A
  54 |     |      * plain `call` is an unsafe replacement for a function call: use this
  55 |     |      * function instead.
  56 |     |      *
  57 |     |      * If `target` reverts with a revert reason or custom error, it is bubbled
  58 |     |      * up by this function (like regular Solidity function calls). However, if
  59 |     |      * the call reverted with no returned reason, this function reverts with a
  60 |     |      * {FailedInnerCall} error.
  61 |     |      *
  62 |     |      * Returns the raw returned data. To convert to the expected return value,
  63 |     |      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
  64 |     |      *
  65 |     |      * Requirements:
  66 |     |      *
  67 |     |      * - `target` must be a contract.
  68 |     |      * - calling `target` with `data` must not revert.
  69 |     |      */
  70 |     |     function functionCall(address target, bytes memory data) internal returns (bytes memory) {
  71 | *   |         return functionCallWithValue(target, data, 0);
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  76 |     |      * but also transferring `value` wei to `target`.
  77 |     |      *
  78 |     |      * Requirements:
  79 |     |      *
  80 |     |      * - the calling contract must have an ETH balance of at least `value`.
  81 |     |      * - the called Solidity function must be `payable`.
  82 |     |      */
  83 |     |     function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
  84 |     |         if (address(this).balance < value) {
  85 |     |             revert AddressInsufficientBalance(address(this));
  86 |     |         }
  87 | *   |         (bool success, bytes memory returndata) = target.call{value: value}(data);
  88 | *   |         return verifyCallResultFromTarget(target, success, returndata);
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
  93 |     |      * but performing a static call.
  94 |     |      */
  95 |     |     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
  96 |     |         (bool success, bytes memory returndata) = target.staticcall(data);
  97 |     |         return verifyCallResultFromTarget(target, success, returndata);
  98 |     |     }
  99 |     | 
 100 |     |     /**
 101 |     |      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
 102 |     |      * but performing a delegate call.
 103 |     |      */
 104 |     |     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
 105 |     |         (bool success, bytes memory returndata) = target.delegatecall(data);
 106 |     |         return verifyCallResultFromTarget(target, success, returndata);
 107 |     |     }
 108 |     | 
 109 |     |     /**
 110 |     |      * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
 111 |     |      * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
 112 |     |      * unsuccessful call.
 113 |     |      */
 114 | *   |     function verifyCallResultFromTarget(
 115 |     |         address target,
 116 |     |         bool success,
 117 |     |         bytes memory returndata
 118 |     |     ) internal view returns (bytes memory) {
 119 | *   |         if (!success) {
 120 |     |             _revert(returndata);
 121 |     |         } else {
 122 |     |             // only check if target is a contract if the call was successful and the return data is empty
 123 |     |             // otherwise we already know that it was a contract
 124 | *   |             if (returndata.length == 0 && target.code.length == 0) {
 125 |     |                 revert AddressEmptyCode(target);
 126 |     |             }
 127 | *   |             return returndata;
 128 |     |         }
 129 |     |     }
 130 |     | 
 131 |     |     /**
 132 |     |      * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
 133 |     |      * revert reason or with a default {FailedInnerCall} error.
 134 |     |      */
 135 |     |     function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
 136 |     |         if (!success) {
 137 |     |             _revert(returndata);
 138 |     |         } else {
 139 |     |             return returndata;
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     /**
 144 |     |      * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
 145 |     |      */
 146 |     |     function _revert(bytes memory returndata) private pure {
 147 |     |         // Look for revert reason and bubble it up if present
 148 | *   |         if (returndata.length > 0) {
 149 |     |             // The easiest way to bubble the revert reason is using memory via assembly
 150 |     |             /// @solidity memory-safe-assembly
 151 | *   |             assembly {
 152 |     |                 let returndata_size := mload(returndata)
 153 |     |                 revert(add(32, returndata), returndata_size)
 154 |     |             }
 155 |     |         } else {
 156 |     |             revert FailedInnerCall();
 157 |     |         }
 158 |     |     }
 159 |     | }
 160 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 | *   |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | 
 25 |     |     function _contextSuffixLength() internal view virtual returns (uint256) {
 26 |     |         return 0;
 27 |     |     }
 28 |     | }
 29 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/Nonces.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)
  3 |     | pragma solidity ^0.8.20;
  4 |     | 
  5 |     | /**
  6 |     |  * @dev Provides tracking nonces for addresses. Nonces will only increment.
  7 |     |  */
  8 |     | abstract contract Nonces {
  9 |     |     /**
 10 |     |      * @dev The nonce used for an `account` is not the expected current nonce.
 11 |     |      */
 12 |     |     error InvalidAccountNonce(address account, uint256 currentNonce);
 13 |     | 
 14 |     |     mapping(address account => uint256) private _nonces;
 15 |     | 
 16 |     |     /**
 17 |     |      * @dev Returns the next unused nonce for an address.
 18 |     |      */
 19 |     |     function nonces(address owner) public view virtual returns (uint256) {
 20 |     |         return _nonces[owner];
 21 |     |     }
 22 |     | 
 23 |     |     /**
 24 |     |      * @dev Consumes a nonce.
 25 |     |      *
 26 |     |      * Returns the current value and increments nonce.
 27 |     |      */
 28 |     |     function _useNonce(address owner) internal virtual returns (uint256) {
 29 |     |         // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be
 30 |     |         // decremented or reset. This guarantees that the nonce never overflows.
 31 |     |         unchecked {
 32 |     |             // It is important to do x++ and not ++x here.
 33 |     |             return _nonces[owner]++;
 34 |     |         }
 35 |     |     }
 36 |     | 
 37 |     |     /**
 38 |     |      * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.
 39 |     |      */
 40 |     |     function _useCheckedNonce(address owner, uint256 nonce) internal virtual {
 41 |     |         uint256 current = _useNonce(owner);
 42 |     |         if (nonce != current) {
 43 |     |             revert InvalidAccountNonce(owner, current);
 44 |     |         }
 45 |     |     }
 46 |     | }
 47 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {StorageSlot} from "./StorageSlot.sol";
   7 |     | 
   8 |     | // | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |
   9 |     | // | length  | 0x                                                              BB |
  10 |     | type ShortString is bytes32;
  11 |     | 
  12 |     | /**
  13 |     |  * @dev This library provides functions to convert short memory strings
  14 |     |  * into a `ShortString` type that can be used as an immutable variable.
  15 |     |  *
  16 |     |  * Strings of arbitrary length can be optimized using this library if
  17 |     |  * they are short enough (up to 31 bytes) by packing them with their
  18 |     |  * length (1 byte) in a single EVM word (32 bytes). Additionally, a
  19 |     |  * fallback mechanism can be used for every other case.
  20 |     |  *
  21 |     |  * Usage example:
  22 |     |  *
  23 |     |  * ```solidity
  24 |     |  * contract Named {
  25 |     |  *     using ShortStrings for *;
  26 |     |  *
  27 |     |  *     ShortString private immutable _name;
  28 |     |  *     string private _nameFallback;
  29 |     |  *
  30 |     |  *     constructor(string memory contractName) {
  31 |     |  *         _name = contractName.toShortStringWithFallback(_nameFallback);
  32 |     |  *     }
  33 |     |  *
  34 |     |  *     function name() external view returns (string memory) {
  35 |     |  *         return _name.toStringWithFallback(_nameFallback);
  36 |     |  *     }
  37 |     |  * }
  38 |     |  * ```
  39 |     |  */
  40 |     | library ShortStrings {
  41 |     |     // Used as an identifier for strings longer than 31 bytes.
  42 |     |     bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;
  43 |     | 
  44 |     |     error StringTooLong(string str);
  45 |     |     error InvalidShortString();
  46 |     | 
  47 |     |     /**
  48 |     |      * @dev Encode a string of at most 31 chars into a `ShortString`.
  49 |     |      *
  50 |     |      * This will trigger a `StringTooLong` error is the input string is too long.
  51 |     |      */
  52 |     |     function toShortString(string memory str) internal pure returns (ShortString) {
  53 |     |         bytes memory bstr = bytes(str);
  54 | *   |         if (bstr.length > 31) {
  55 |     |             revert StringTooLong(str);
  56 |     |         }
  57 | *   |         return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
  58 |     |     }
  59 |     | 
  60 |     |     /**
  61 |     |      * @dev Decode a `ShortString` back to a "normal" string.
  62 |     |      */
  63 |     |     function toString(ShortString sstr) internal pure returns (string memory) {
  64 |     |         uint256 len = byteLength(sstr);
  65 |     |         // using `new string(len)` would work locally but is not memory safe.
  66 |     |         string memory str = new string(32);
  67 |     |         /// @solidity memory-safe-assembly
  68 |     |         assembly {
  69 |     |             mstore(str, len)
  70 |     |             mstore(add(str, 0x20), sstr)
  71 |     |         }
  72 |     |         return str;
  73 |     |     }
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Return the length of a `ShortString`.
  77 |     |      */
  78 |     |     function byteLength(ShortString sstr) internal pure returns (uint256) {
  79 |     |         uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
  80 |     |         if (result > 31) {
  81 |     |             revert InvalidShortString();
  82 |     |         }
  83 |     |         return result;
  84 |     |     }
  85 |     | 
  86 |     |     /**
  87 |     |      * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.
  88 |     |      */
  89 | *   |     function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
  90 | *   |         if (bytes(value).length < 32) {
  91 | *   |             return toShortString(value);
  92 |     |         } else {
  93 |     |             StorageSlot.getStringSlot(store).value = value;
  94 |     |             return ShortString.wrap(FALLBACK_SENTINEL);
  95 |     |         }
  96 |     |     }
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
 100 |     |      */
 101 |     |     function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
 102 |     |         if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
 103 |     |             return toString(value);
 104 |     |         } else {
 105 |     |             return store;
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 |     |     /**
 110 |     |      * @dev Return the length of a string that was encoded to `ShortString` or written to storage using
 111 |     |      * {setWithFallback}.
 112 |     |      *
 113 |     |      * WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
 114 |     |      * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
 115 |     |      */
 116 |     |     function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
 117 |     |         if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {
 118 |     |             return byteLength(value);
 119 |     |         } else {
 120 |     |             return bytes(store).length;
 121 |     |         }
 122 |     |     }
 123 |     | }
 124 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)
   3 |     | // This file was procedurally generated from scripts/generate/templates/StorageSlot.js.
   4 |     | 
   5 |     | pragma solidity ^0.8.20;
   6 |     | 
   7 |     | /**
   8 |     |  * @dev Library for reading and writing primitive types to specific storage slots.
   9 |     |  *
  10 |     |  * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
  11 |     |  * This library helps with reading and writing to such slots without the need for inline assembly.
  12 |     |  *
  13 |     |  * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
  14 |     |  *
  15 |     |  * Example usage to set ERC1967 implementation slot:
  16 |     |  * ```solidity
  17 |     |  * contract ERC1967 {
  18 |     |  *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
  19 |     |  *
  20 |     |  *     function _getImplementation() internal view returns (address) {
  21 |     |  *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
  22 |     |  *     }
  23 |     |  *
  24 |     |  *     function _setImplementation(address newImplementation) internal {
  25 |     |  *         require(newImplementation.code.length > 0);
  26 |     |  *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
  27 |     |  *     }
  28 |     |  * }
  29 |     |  * ```
  30 |     |  */
  31 |     | library StorageSlot {
  32 |     |     struct AddressSlot {
  33 |     |         address value;
  34 |     |     }
  35 |     | 
  36 |     |     struct BooleanSlot {
  37 |     |         bool value;
  38 |     |     }
  39 |     | 
  40 |     |     struct Bytes32Slot {
  41 |     |         bytes32 value;
  42 |     |     }
  43 |     | 
  44 |     |     struct Uint256Slot {
  45 |     |         uint256 value;
  46 |     |     }
  47 |     | 
  48 |     |     struct StringSlot {
  49 |     |         string value;
  50 |     |     }
  51 |     | 
  52 |     |     struct BytesSlot {
  53 |     |         bytes value;
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Returns an `AddressSlot` with member `value` located at `slot`.
  58 |     |      */
  59 |     |     function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
  60 |     |         /// @solidity memory-safe-assembly
  61 |     |         assembly {
  62 |     |             r.slot := slot
  63 |     |         }
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Returns an `BooleanSlot` with member `value` located at `slot`.
  68 |     |      */
  69 |     |     function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
  70 |     |         /// @solidity memory-safe-assembly
  71 |     |         assembly {
  72 |     |             r.slot := slot
  73 |     |         }
  74 |     |     }
  75 |     | 
  76 |     |     /**
  77 |     |      * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
  78 |     |      */
  79 |     |     function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
  80 |     |         /// @solidity memory-safe-assembly
  81 |     |         assembly {
  82 |     |             r.slot := slot
  83 |     |         }
  84 |     |     }
  85 |     | 
  86 |     |     /**
  87 |     |      * @dev Returns an `Uint256Slot` with member `value` located at `slot`.
  88 |     |      */
  89 |     |     function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
  90 |     |         /// @solidity memory-safe-assembly
  91 |     |         assembly {
  92 |     |             r.slot := slot
  93 |     |         }
  94 |     |     }
  95 |     | 
  96 |     |     /**
  97 |     |      * @dev Returns an `StringSlot` with member `value` located at `slot`.
  98 |     |      */
  99 |     |     function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
 100 |     |         /// @solidity memory-safe-assembly
 101 |     |         assembly {
 102 |     |             r.slot := slot
 103 |     |         }
 104 |     |     }
 105 |     | 
 106 |     |     /**
 107 |     |      * @dev Returns an `StringSlot` representation of the string storage pointer `store`.
 108 |     |      */
 109 |     |     function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
 110 |     |         /// @solidity memory-safe-assembly
 111 |     |         assembly {
 112 |     |             r.slot := store.slot
 113 |     |         }
 114 |     |     }
 115 |     | 
 116 |     |     /**
 117 |     |      * @dev Returns an `BytesSlot` with member `value` located at `slot`.
 118 |     |      */
 119 |     |     function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
 120 |     |         /// @solidity memory-safe-assembly
 121 |     |         assembly {
 122 |     |             r.slot := slot
 123 |     |         }
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
 128 |     |      */
 129 |     |     function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
 130 |     |         /// @solidity memory-safe-assembly
 131 |     |         assembly {
 132 |     |             r.slot := store.slot
 133 |     |         }
 134 |     |     }
 135 |     | }
 136 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/Strings.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {Math} from "./math/Math.sol";
  7 |     | import {SignedMath} from "./math/SignedMath.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev String operations.
 11 |     |  */
 12 |     | library Strings {
 13 |     |     bytes16 private constant HEX_DIGITS = "0123456789abcdef";
 14 |     |     uint8 private constant ADDRESS_LENGTH = 20;
 15 |     | 
 16 |     |     /**
 17 |     |      * @dev The `value` string doesn't fit in the specified `length`.
 18 |     |      */
 19 |     |     error StringsInsufficientHexLength(uint256 value, uint256 length);
 20 |     | 
 21 |     |     /**
 22 |     |      * @dev Converts a `uint256` to its ASCII `string` decimal representation.
 23 |     |      */
 24 |     |     function toString(uint256 value) internal pure returns (string memory) {
 25 |     |         unchecked {
 26 |     |             uint256 length = Math.log10(value) + 1;
 27 |     |             string memory buffer = new string(length);
 28 |     |             uint256 ptr;
 29 |     |             /// @solidity memory-safe-assembly
 30 |     |             assembly {
 31 |     |                 ptr := add(buffer, add(32, length))
 32 |     |             }
 33 |     |             while (true) {
 34 |     |                 ptr--;
 35 |     |                 /// @solidity memory-safe-assembly
 36 |     |                 assembly {
 37 |     |                     mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))
 38 |     |                 }
 39 |     |                 value /= 10;
 40 |     |                 if (value == 0) break;
 41 |     |             }
 42 |     |             return buffer;
 43 |     |         }
 44 |     |     }
 45 |     | 
 46 |     |     /**
 47 |     |      * @dev Converts a `int256` to its ASCII `string` decimal representation.
 48 |     |      */
 49 |     |     function toStringSigned(int256 value) internal pure returns (string memory) {
 50 |     |         return string.concat(value < 0 ? "-" : "", toString(SignedMath.abs(value)));
 51 |     |     }
 52 |     | 
 53 |     |     /**
 54 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
 55 |     |      */
 56 |     |     function toHexString(uint256 value) internal pure returns (string memory) {
 57 |     |         unchecked {
 58 |     |             return toHexString(value, Math.log256(value) + 1);
 59 |     |         }
 60 |     |     }
 61 |     | 
 62 |     |     /**
 63 |     |      * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
 64 |     |      */
 65 |     |     function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
 66 |     |         uint256 localValue = value;
 67 |     |         bytes memory buffer = new bytes(2 * length + 2);
 68 |     |         buffer[0] = "0";
 69 |     |         buffer[1] = "x";
 70 |     |         for (uint256 i = 2 * length + 1; i > 1; --i) {
 71 |     |             buffer[i] = HEX_DIGITS[localValue & 0xf];
 72 |     |             localValue >>= 4;
 73 |     |         }
 74 |     |         if (localValue != 0) {
 75 |     |             revert StringsInsufficientHexLength(value, length);
 76 |     |         }
 77 |     |         return string(buffer);
 78 |     |     }
 79 |     | 
 80 |     |     /**
 81 |     |      * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal
 82 |     |      * representation.
 83 |     |      */
 84 |     |     function toHexString(address addr) internal pure returns (string memory) {
 85 |     |         return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);
 86 |     |     }
 87 |     | 
 88 |     |     /**
 89 |     |      * @dev Returns true if the two strings are equal.
 90 |     |      */
 91 |     |     function equal(string memory a, string memory b) internal pure returns (bool) {
 92 |     |         return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));
 93 |     |     }
 94 |     | }
 95 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
   8 |     |  *
   9 |     |  * These functions can be used to verify that a message was signed by the holder
  10 |     |  * of the private keys of a given address.
  11 |     |  */
  12 |     | library ECDSA {
  13 |     |     enum RecoverError {
  14 |     |         NoError,
  15 |     |         InvalidSignature,
  16 |     |         InvalidSignatureLength,
  17 |     |         InvalidSignatureS
  18 |     |     }
  19 |     | 
  20 |     |     /**
  21 |     |      * @dev The signature derives the `address(0)`.
  22 |     |      */
  23 |     |     error ECDSAInvalidSignature();
  24 |     | 
  25 |     |     /**
  26 |     |      * @dev The signature has an invalid length.
  27 |     |      */
  28 |     |     error ECDSAInvalidSignatureLength(uint256 length);
  29 |     | 
  30 |     |     /**
  31 |     |      * @dev The signature has an S value that is in the upper half order.
  32 |     |      */
  33 |     |     error ECDSAInvalidSignatureS(bytes32 s);
  34 |     | 
  35 |     |     /**
  36 |     |      * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not
  37 |     |      * return address(0) without also returning an error description. Errors are documented using an enum (error type)
  38 |     |      * and a bytes32 providing additional information about the error.
  39 |     |      *
  40 |     |      * If no error is returned, then the address can be used for verification purposes.
  41 |     |      *
  42 |     |      * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
  43 |     |      * this function rejects them by requiring the `s` value to be in the lower
  44 |     |      * half order, and the `v` value to be either 27 or 28.
  45 |     |      *
  46 |     |      * IMPORTANT: `hash` _must_ be the result of a hash operation for the
  47 |     |      * verification to be secure: it is possible to craft signatures that
  48 |     |      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
  49 |     |      * this is by receiving a hash of the original message (which may otherwise
  50 |     |      * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
  51 |     |      *
  52 |     |      * Documentation for signature generation:
  53 |     |      * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
  54 |     |      * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
  55 |     |      */
  56 |     |     function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {
  57 |     |         if (signature.length == 65) {
  58 |     |             bytes32 r;
  59 |     |             bytes32 s;
  60 |     |             uint8 v;
  61 |     |             // ecrecover takes the signature parameters, and the only way to get them
  62 |     |             // currently is to use assembly.
  63 |     |             /// @solidity memory-safe-assembly
  64 |     |             assembly {
  65 |     |                 r := mload(add(signature, 0x20))
  66 |     |                 s := mload(add(signature, 0x40))
  67 |     |                 v := byte(0, mload(add(signature, 0x60)))
  68 |     |             }
  69 |     |             return tryRecover(hash, v, r, s);
  70 |     |         } else {
  71 |     |             return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));
  72 |     |         }
  73 |     |     }
  74 |     | 
  75 |     |     /**
  76 |     |      * @dev Returns the address that signed a hashed message (`hash`) with
  77 |     |      * `signature`. This address can then be used for verification purposes.
  78 |     |      *
  79 |     |      * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:
  80 |     |      * this function rejects them by requiring the `s` value to be in the lower
  81 |     |      * half order, and the `v` value to be either 27 or 28.
  82 |     |      *
  83 |     |      * IMPORTANT: `hash` _must_ be the result of a hash operation for the
  84 |     |      * verification to be secure: it is possible to craft signatures that
  85 |     |      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
  86 |     |      * this is by receiving a hash of the original message (which may otherwise
  87 |     |      * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.
  88 |     |      */
  89 |     |     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
  90 |     |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);
  91 |     |         _throwError(error, errorArg);
  92 |     |         return recovered;
  93 |     |     }
  94 |     | 
  95 |     |     /**
  96 |     |      * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
  97 |     |      *
  98 |     |      * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
  99 |     |      */
 100 |     |     function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {
 101 |     |         unchecked {
 102 |     |             bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
 103 |     |             // We do not check for an overflow here since the shift operation results in 0 or 1.
 104 |     |             uint8 v = uint8((uint256(vs) >> 255) + 27);
 105 |     |             return tryRecover(hash, v, r, s);
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 |     |     /**
 110 |     |      * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
 111 |     |      */
 112 |     |     function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
 113 |     |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);
 114 |     |         _throwError(error, errorArg);
 115 |     |         return recovered;
 116 |     |     }
 117 |     | 
 118 |     |     /**
 119 |     |      * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
 120 |     |      * `r` and `s` signature fields separately.
 121 |     |      */
 122 |     |     function tryRecover(
 123 |     |         bytes32 hash,
 124 |     |         uint8 v,
 125 |     |         bytes32 r,
 126 |     |         bytes32 s
 127 |     |     ) internal pure returns (address, RecoverError, bytes32) {
 128 |     |         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
 129 |     |         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
 130 |     |         // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
 131 |     |         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
 132 |     |         //
 133 |     |         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
 134 |     |         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
 135 |     |         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
 136 |     |         // these malleable signatures as well.
 137 |     |         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
 138 |     |             return (address(0), RecoverError.InvalidSignatureS, s);
 139 |     |         }
 140 |     | 
 141 |     |         // If the signature is valid (and not malleable), return the signer address
 142 |     |         address signer = ecrecover(hash, v, r, s);
 143 |     |         if (signer == address(0)) {
 144 |     |             return (address(0), RecoverError.InvalidSignature, bytes32(0));
 145 |     |         }
 146 |     | 
 147 |     |         return (signer, RecoverError.NoError, bytes32(0));
 148 |     |     }
 149 |     | 
 150 |     |     /**
 151 |     |      * @dev Overload of {ECDSA-recover} that receives the `v`,
 152 |     |      * `r` and `s` signature fields separately.
 153 |     |      */
 154 |     |     function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
 155 |     |         (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);
 156 |     |         _throwError(error, errorArg);
 157 |     |         return recovered;
 158 |     |     }
 159 |     | 
 160 |     |     /**
 161 |     |      * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.
 162 |     |      */
 163 |     |     function _throwError(RecoverError error, bytes32 errorArg) private pure {
 164 |     |         if (error == RecoverError.NoError) {
 165 |     |             return; // no error: do nothing
 166 |     |         } else if (error == RecoverError.InvalidSignature) {
 167 |     |             revert ECDSAInvalidSignature();
 168 |     |         } else if (error == RecoverError.InvalidSignatureLength) {
 169 |     |             revert ECDSAInvalidSignatureLength(uint256(errorArg));
 170 |     |         } else if (error == RecoverError.InvalidSignatureS) {
 171 |     |             revert ECDSAInvalidSignatureS(errorArg);
 172 |     |         }
 173 |     |     }
 174 |     | }
 175 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | import {MessageHashUtils} from "./MessageHashUtils.sol";
   7 |     | import {ShortStrings, ShortString} from "../ShortStrings.sol";
   8 |     | import {IERC5267} from "../../interfaces/IERC5267.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
  12 |     |  *
  13 |     |  * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose
  14 |     |  * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract
  15 |     |  * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to
  16 |     |  * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.
  17 |     |  *
  18 |     |  * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
  19 |     |  * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
  20 |     |  * ({_hashTypedDataV4}).
  21 |     |  *
  22 |     |  * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
  23 |     |  * the chain id to protect against replay attacks on an eventual fork of the chain.
  24 |     |  *
  25 |     |  * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
  26 |     |  * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
  27 |     |  *
  28 |     |  * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
  29 |     |  * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the
  30 |     |  * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
  31 |     |  *
  32 |     |  * @custom:oz-upgrades-unsafe-allow state-variable-immutable
  33 |     |  */
  34 |     | abstract contract EIP712 is IERC5267 {
  35 |     |     using ShortStrings for *;
  36 |     | 
  37 |     |     bytes32 private constant TYPE_HASH =
  38 | *   |         keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
  39 |     | 
  40 |     |     // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
  41 |     |     // invalidate the cached domain separator if the chain id changes.
  42 |     |     bytes32 private immutable _cachedDomainSeparator;
  43 |     |     uint256 private immutable _cachedChainId;
  44 |     |     address private immutable _cachedThis;
  45 |     | 
  46 |     |     bytes32 private immutable _hashedName;
  47 |     |     bytes32 private immutable _hashedVersion;
  48 |     | 
  49 |     |     ShortString private immutable _name;
  50 |     |     ShortString private immutable _version;
  51 |     |     string private _nameFallback;
  52 |     |     string private _versionFallback;
  53 |     | 
  54 |     |     /**
  55 |     |      * @dev Initializes the domain separator and parameter caches.
  56 |     |      *
  57 |     |      * The meaning of `name` and `version` is specified in
  58 |     |      * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
  59 |     |      *
  60 |     |      * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
  61 |     |      * - `version`: the current major version of the signing domain.
  62 |     |      *
  63 |     |      * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
  64 |     |      * contract upgrade].
  65 |     |      */
  66 |     |     constructor(string memory name, string memory version) {
  67 | *   |         _name = name.toShortStringWithFallback(_nameFallback);
  68 | *   |         _version = version.toShortStringWithFallback(_versionFallback);
  69 | *   |         _hashedName = keccak256(bytes(name));
  70 | *   |         _hashedVersion = keccak256(bytes(version));
  71 |     | 
  72 | *   |         _cachedChainId = block.chainid;
  73 | *   |         _cachedDomainSeparator = _buildDomainSeparator();
  74 | *   |         _cachedThis = address(this);
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Returns the domain separator for the current chain.
  79 |     |      */
  80 |     |     function _domainSeparatorV4() internal view returns (bytes32) {
  81 |     |         if (address(this) == _cachedThis && block.chainid == _cachedChainId) {
  82 |     |             return _cachedDomainSeparator;
  83 |     |         } else {
  84 |     |             return _buildDomainSeparator();
  85 |     |         }
  86 |     |     }
  87 |     | 
  88 |     |     function _buildDomainSeparator() private view returns (bytes32) {
  89 | *   |         return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
  94 |     |      * function returns the hash of the fully encoded EIP712 message for this domain.
  95 |     |      *
  96 |     |      * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
  97 |     |      *
  98 |     |      * ```solidity
  99 |     |      * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
 100 |     |      *     keccak256("Mail(address to,string contents)"),
 101 |     |      *     mailTo,
 102 |     |      *     keccak256(bytes(mailContents))
 103 |     |      * )));
 104 |     |      * address signer = ECDSA.recover(digest, signature);
 105 |     |      * ```
 106 |     |      */
 107 |     |     function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
 108 |     |         return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);
 109 |     |     }
 110 |     | 
 111 |     |     /**
 112 |     |      * @dev See {IERC-5267}.
 113 |     |      */
 114 |     |     function eip712Domain()
 115 |     |         public
 116 |     |         view
 117 |     |         virtual
 118 |     |         returns (
 119 |     |             bytes1 fields,
 120 |     |             string memory name,
 121 |     |             string memory version,
 122 |     |             uint256 chainId,
 123 |     |             address verifyingContract,
 124 |     |             bytes32 salt,
 125 |     |             uint256[] memory extensions
 126 |     |         )
 127 |     |     {
 128 |     |         return (
 129 |     |             hex"0f", // 01111
 130 |     |             _EIP712Name(),
 131 |     |             _EIP712Version(),
 132 |     |             block.chainid,
 133 |     |             address(this),
 134 |     |             bytes32(0),
 135 |     |             new uint256[](0)
 136 |     |         );
 137 |     |     }
 138 |     | 
 139 |     |     /**
 140 |     |      * @dev The name parameter for the EIP712 domain.
 141 |     |      *
 142 |     |      * NOTE: By default this function reads _name which is an immutable value.
 143 |     |      * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
 144 |     |      */
 145 |     |     // solhint-disable-next-line func-name-mixedcase
 146 |     |     function _EIP712Name() internal view returns (string memory) {
 147 |     |         return _name.toStringWithFallback(_nameFallback);
 148 |     |     }
 149 |     | 
 150 |     |     /**
 151 |     |      * @dev The version parameter for the EIP712 domain.
 152 |     |      *
 153 |     |      * NOTE: By default this function reads _version which is an immutable value.
 154 |     |      * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).
 155 |     |      */
 156 |     |     // solhint-disable-next-line func-name-mixedcase
 157 |     |     function _EIP712Version() internal view returns (string memory) {
 158 |     |         return _version.toStringWithFallback(_versionFallback);
 159 |     |     }
 160 |     | }
 161 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {Strings} from "../Strings.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.
 10 |     |  *
 11 |     |  * The library provides methods for generating a hash of a message that conforms to the
 12 |     |  * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]
 13 |     |  * specifications.
 14 |     |  */
 15 |     | library MessageHashUtils {
 16 |     |     /**
 17 |     |      * @dev Returns the keccak256 digest of an EIP-191 signed data with version
 18 |     |      * `0x45` (`personal_sign` messages).
 19 |     |      *
 20 |     |      * The digest is calculated by prefixing a bytes32 `messageHash` with
 21 |     |      * `"\x19Ethereum Signed Message:\n32"` and hashing the result. It corresponds with the
 22 |     |      * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
 23 |     |      *
 24 |     |      * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with
 25 |     |      * keccak256, although any bytes32 value can be safely used because the final digest will
 26 |     |      * be re-hashed.
 27 |     |      *
 28 |     |      * See {ECDSA-recover}.
 29 |     |      */
 30 |     |     function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {
 31 |     |         /// @solidity memory-safe-assembly
 32 |     |         assembly {
 33 |     |             mstore(0x00, "\x19Ethereum Signed Message:\n32") // 32 is the bytes-length of messageHash
 34 |     |             mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix
 35 |     |             digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)
 36 |     |         }
 37 |     |     }
 38 |     | 
 39 |     |     /**
 40 |     |      * @dev Returns the keccak256 digest of an EIP-191 signed data with version
 41 |     |      * `0x45` (`personal_sign` messages).
 42 |     |      *
 43 |     |      * The digest is calculated by prefixing an arbitrary `message` with
 44 |     |      * `"\x19Ethereum Signed Message:\n" + len(message)` and hashing the result. It corresponds with the
 45 |     |      * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.
 46 |     |      *
 47 |     |      * See {ECDSA-recover}.
 48 |     |      */
 49 |     |     function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {
 50 |     |         return
 51 |     |             keccak256(bytes.concat("\x19Ethereum Signed Message:\n", bytes(Strings.toString(message.length)), message));
 52 |     |     }
 53 |     | 
 54 |     |     /**
 55 |     |      * @dev Returns the keccak256 digest of an EIP-191 signed data with version
 56 |     |      * `0x00` (data with intended validator).
 57 |     |      *
 58 |     |      * The digest is calculated by prefixing an arbitrary `data` with `"\x19\x00"` and the intended
 59 |     |      * `validator` address. Then hashing the result.
 60 |     |      *
 61 |     |      * See {ECDSA-recover}.
 62 |     |      */
 63 |     |     function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
 64 |     |         return keccak256(abi.encodePacked(hex"19_00", validator, data));
 65 |     |     }
 66 |     | 
 67 |     |     /**
 68 |     |      * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).
 69 |     |      *
 70 |     |      * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with
 71 |     |      * `\x19\x01` and hashing the result. It corresponds to the hash signed by the
 72 |     |      * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.
 73 |     |      *
 74 |     |      * See {ECDSA-recover}.
 75 |     |      */
 76 |     |     function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {
 77 |     |         /// @solidity memory-safe-assembly
 78 |     |         assembly {
 79 |     |             let ptr := mload(0x40)
 80 |     |             mstore(ptr, hex"19_01")
 81 |     |             mstore(add(ptr, 0x02), domainSeparator)
 82 |     |             mstore(add(ptr, 0x22), structHash)
 83 |     |             digest := keccak256(ptr, 0x42)
 84 |     |         }
 85 |     |     }
 86 |     | }
 87 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | import {IERC165} from "./IERC165.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Implementation of the {IERC165} interface.
 10 |     |  *
 11 |     |  * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 12 |     |  * for the additional interface id that will be supported. For example:
 13 |     |  *
 14 |     |  * ```solidity
 15 |     |  * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 16 |     |  *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 17 |     |  * }
 18 |     |  * ```
 19 |     |  */
 20 |     | abstract contract ERC165 is IERC165 {
 21 |     |     /**
 22 |     |      * @dev See {IERC165-supportsInterface}.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {
 25 |     |         return interfaceId == type(IERC165).interfaceId;
 26 |     |     }
 27 |     | }
 28 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[EIP].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/math/Math.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.20;
   5 |     | 
   6 |     | /**
   7 |     |  * @dev Standard math utilities missing in the Solidity language.
   8 |     |  */
   9 |     | library Math {
  10 |     |     /**
  11 |     |      * @dev Muldiv operation overflow.
  12 |     |      */
  13 |     |     error MathOverflowedMulDiv();
  14 |     | 
  15 |     |     enum Rounding {
  16 |     |         Floor, // Toward negative infinity
  17 |     |         Ceil, // Toward positive infinity
  18 |     |         Trunc, // Toward zero
  19 |     |         Expand // Away from zero
  20 |     |     }
  21 |     | 
  22 |     |     /**
  23 |     |      * @dev Returns the addition of two unsigned integers, with an overflow flag.
  24 |     |      */
  25 |     |     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
  26 |     |         unchecked {
  27 |     |             uint256 c = a + b;
  28 |     |             if (c < a) return (false, 0);
  29 |     |             return (true, c);
  30 |     |         }
  31 |     |     }
  32 |     | 
  33 |     |     /**
  34 |     |      * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
  35 |     |      */
  36 |     |     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
  37 |     |         unchecked {
  38 |     |             if (b > a) return (false, 0);
  39 |     |             return (true, a - b);
  40 |     |         }
  41 |     |     }
  42 |     | 
  43 |     |     /**
  44 |     |      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
  45 |     |      */
  46 |     |     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
  47 |     |         unchecked {
  48 |     |             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
  49 |     |             // benefit is lost if 'b' is also tested.
  50 |     |             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
  51 |     |             if (a == 0) return (true, 0);
  52 |     |             uint256 c = a * b;
  53 |     |             if (c / a != b) return (false, 0);
  54 |     |             return (true, c);
  55 |     |         }
  56 |     |     }
  57 |     | 
  58 |     |     /**
  59 |     |      * @dev Returns the division of two unsigned integers, with a division by zero flag.
  60 |     |      */
  61 |     |     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
  62 |     |         unchecked {
  63 |     |             if (b == 0) return (false, 0);
  64 |     |             return (true, a / b);
  65 |     |         }
  66 |     |     }
  67 |     | 
  68 |     |     /**
  69 |     |      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
  70 |     |      */
  71 |     |     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
  72 |     |         unchecked {
  73 |     |             if (b == 0) return (false, 0);
  74 |     |             return (true, a % b);
  75 |     |         }
  76 |     |     }
  77 |     | 
  78 |     |     /**
  79 |     |      * @dev Returns the largest of two numbers.
  80 |     |      */
  81 |     |     function max(uint256 a, uint256 b) internal pure returns (uint256) {
  82 |     |         return a > b ? a : b;
  83 |     |     }
  84 |     | 
  85 |     |     /**
  86 |     |      * @dev Returns the smallest of two numbers.
  87 |     |      */
  88 |     |     function min(uint256 a, uint256 b) internal pure returns (uint256) {
  89 |     |         return a < b ? a : b;
  90 |     |     }
  91 |     | 
  92 |     |     /**
  93 |     |      * @dev Returns the average of two numbers. The result is rounded towards
  94 |     |      * zero.
  95 |     |      */
  96 |     |     function average(uint256 a, uint256 b) internal pure returns (uint256) {
  97 |     |         // (a + b) / 2 can overflow.
  98 |     |         return (a & b) + (a ^ b) / 2;
  99 |     |     }
 100 |     | 
 101 |     |     /**
 102 |     |      * @dev Returns the ceiling of the division of two numbers.
 103 |     |      *
 104 |     |      * This differs from standard division with `/` in that it rounds towards infinity instead
 105 |     |      * of rounding towards zero.
 106 |     |      */
 107 |     |     function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
 108 |     |         if (b == 0) {
 109 |     |             // Guarantee the same behavior as in a regular Solidity division.
 110 |     |             return a / b;
 111 |     |         }
 112 |     | 
 113 |     |         // (a + b - 1) / b can overflow on addition, so we distribute.
 114 |     |         return a == 0 ? 0 : (a - 1) / b + 1;
 115 |     |     }
 116 |     | 
 117 |     |     /**
 118 |     |      * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or
 119 |     |      * denominator == 0.
 120 |     |      * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by
 121 |     |      * Uniswap Labs also under MIT license.
 122 |     |      */
 123 | *   |     function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
 124 |     |         unchecked {
 125 |     |             // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
 126 |     |             // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
 127 |     |             // variables such that product = prod1 * 2^256 + prod0.
 128 |     |             uint256 prod0 = x * y; // Least significant 256 bits of the product
 129 |     |             uint256 prod1; // Most significant 256 bits of the product
 130 | *   |             assembly {
 131 |     |                 let mm := mulmod(x, y, not(0))
 132 |     |                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
 133 |     |             }
 134 |     | 
 135 |     |             // Handle non-overflow cases, 256 by 256 division.
 136 | *   |             if (prod1 == 0) {
 137 |     |                 // Solidity will revert if denominator == 0, unlike the div opcode on its own.
 138 |     |                 // The surrounding unchecked block does not change this fact.
 139 |     |                 // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.
 140 | *   |                 return prod0 / denominator;
 141 |     |             }
 142 |     | 
 143 |     |             // Make sure the result is less than 2^256. Also prevents denominator == 0.
 144 |     |             if (denominator <= prod1) {
 145 |     |                 revert MathOverflowedMulDiv();
 146 |     |             }
 147 |     | 
 148 |     |             ///////////////////////////////////////////////
 149 |     |             // 512 by 256 division.
 150 |     |             ///////////////////////////////////////////////
 151 |     | 
 152 |     |             // Make division exact by subtracting the remainder from [prod1 prod0].
 153 |     |             uint256 remainder;
 154 |     |             assembly {
 155 |     |                 // Compute remainder using mulmod.
 156 |     |                 remainder := mulmod(x, y, denominator)
 157 |     | 
 158 |     |                 // Subtract 256 bit number from 512 bit number.
 159 |     |                 prod1 := sub(prod1, gt(remainder, prod0))
 160 |     |                 prod0 := sub(prod0, remainder)
 161 |     |             }
 162 |     | 
 163 |     |             // Factor powers of two out of denominator and compute largest power of two divisor of denominator.
 164 |     |             // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.
 165 |     | 
 166 |     |             uint256 twos = denominator & (0 - denominator);
 167 |     |             assembly {
 168 |     |                 // Divide denominator by twos.
 169 |     |                 denominator := div(denominator, twos)
 170 |     | 
 171 |     |                 // Divide [prod1 prod0] by twos.
 172 |     |                 prod0 := div(prod0, twos)
 173 |     | 
 174 |     |                 // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
 175 |     |                 twos := add(div(sub(0, twos), twos), 1)
 176 |     |             }
 177 |     | 
 178 |     |             // Shift in bits from prod1 into prod0.
 179 |     |             prod0 |= prod1 * twos;
 180 |     | 
 181 |     |             // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
 182 |     |             // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
 183 |     |             // four bits. That is, denominator * inv = 1 mod 2^4.
 184 |     |             uint256 inverse = (3 * denominator) ^ 2;
 185 |     | 
 186 |     |             // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also
 187 |     |             // works in modular arithmetic, doubling the correct bits in each step.
 188 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^8
 189 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^16
 190 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^32
 191 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^64
 192 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^128
 193 |     |             inverse *= 2 - denominator * inverse; // inverse mod 2^256
 194 |     | 
 195 |     |             // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
 196 |     |             // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
 197 |     |             // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
 198 |     |             // is no longer required.
 199 |     |             result = prod0 * inverse;
 200 |     |             return result;
 201 |     |         }
 202 |     |     }
 203 |     | 
 204 |     |     /**
 205 |     |      * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
 206 |     |      */
 207 |     |     function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
 208 | *   |         uint256 result = mulDiv(x, y, denominator);
 209 |     |         if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {
 210 |     |             result += 1;
 211 |     |         }
 212 |     |         return result;
 213 |     |     }
 214 |     | 
 215 |     |     /**
 216 |     |      * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded
 217 |     |      * towards zero.
 218 |     |      *
 219 |     |      * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
 220 |     |      */
 221 |     |     function sqrt(uint256 a) internal pure returns (uint256) {
 222 |     |         if (a == 0) {
 223 |     |             return 0;
 224 |     |         }
 225 |     | 
 226 |     |         // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
 227 |     |         //
 228 |     |         // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
 229 |     |         // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
 230 |     |         //
 231 |     |         // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
 232 |     |         // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
 233 |     |         // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
 234 |     |         //
 235 |     |         // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
 236 |     |         uint256 result = 1 << (log2(a) >> 1);
 237 |     | 
 238 |     |         // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
 239 |     |         // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
 240 |     |         // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
 241 |     |         // into the expected uint128 result.
 242 |     |         unchecked {
 243 |     |             result = (result + a / result) >> 1;
 244 |     |             result = (result + a / result) >> 1;
 245 |     |             result = (result + a / result) >> 1;
 246 |     |             result = (result + a / result) >> 1;
 247 |     |             result = (result + a / result) >> 1;
 248 |     |             result = (result + a / result) >> 1;
 249 |     |             result = (result + a / result) >> 1;
 250 |     |             return min(result, a / result);
 251 |     |         }
 252 |     |     }
 253 |     | 
 254 |     |     /**
 255 |     |      * @notice Calculates sqrt(a), following the selected rounding direction.
 256 |     |      */
 257 |     |     function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
 258 |     |         unchecked {
 259 |     |             uint256 result = sqrt(a);
 260 |     |             return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);
 261 |     |         }
 262 |     |     }
 263 |     | 
 264 |     |     /**
 265 |     |      * @dev Return the log in base 2 of a positive value rounded towards zero.
 266 |     |      * Returns 0 if given 0.
 267 |     |      */
 268 |     |     function log2(uint256 value) internal pure returns (uint256) {
 269 |     |         uint256 result = 0;
 270 |     |         unchecked {
 271 |     |             if (value >> 128 > 0) {
 272 |     |                 value >>= 128;
 273 |     |                 result += 128;
 274 |     |             }
 275 |     |             if (value >> 64 > 0) {
 276 |     |                 value >>= 64;
 277 |     |                 result += 64;
 278 |     |             }
 279 |     |             if (value >> 32 > 0) {
 280 |     |                 value >>= 32;
 281 |     |                 result += 32;
 282 |     |             }
 283 |     |             if (value >> 16 > 0) {
 284 |     |                 value >>= 16;
 285 |     |                 result += 16;
 286 |     |             }
 287 |     |             if (value >> 8 > 0) {
 288 |     |                 value >>= 8;
 289 |     |                 result += 8;
 290 |     |             }
 291 |     |             if (value >> 4 > 0) {
 292 |     |                 value >>= 4;
 293 |     |                 result += 4;
 294 |     |             }
 295 |     |             if (value >> 2 > 0) {
 296 |     |                 value >>= 2;
 297 |     |                 result += 2;
 298 |     |             }
 299 |     |             if (value >> 1 > 0) {
 300 |     |                 result += 1;
 301 |     |             }
 302 |     |         }
 303 |     |         return result;
 304 |     |     }
 305 |     | 
 306 |     |     /**
 307 |     |      * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
 308 |     |      * Returns 0 if given 0.
 309 |     |      */
 310 |     |     function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
 311 |     |         unchecked {
 312 |     |             uint256 result = log2(value);
 313 |     |             return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);
 314 |     |         }
 315 |     |     }
 316 |     | 
 317 |     |     /**
 318 |     |      * @dev Return the log in base 10 of a positive value rounded towards zero.
 319 |     |      * Returns 0 if given 0.
 320 |     |      */
 321 |     |     function log10(uint256 value) internal pure returns (uint256) {
 322 |     |         uint256 result = 0;
 323 |     |         unchecked {
 324 |     |             if (value >= 10 ** 64) {
 325 |     |                 value /= 10 ** 64;
 326 |     |                 result += 64;
 327 |     |             }
 328 |     |             if (value >= 10 ** 32) {
 329 |     |                 value /= 10 ** 32;
 330 |     |                 result += 32;
 331 |     |             }
 332 |     |             if (value >= 10 ** 16) {
 333 |     |                 value /= 10 ** 16;
 334 |     |                 result += 16;
 335 |     |             }
 336 |     |             if (value >= 10 ** 8) {
 337 |     |                 value /= 10 ** 8;
 338 |     |                 result += 8;
 339 |     |             }
 340 |     |             if (value >= 10 ** 4) {
 341 |     |                 value /= 10 ** 4;
 342 |     |                 result += 4;
 343 |     |             }
 344 |     |             if (value >= 10 ** 2) {
 345 |     |                 value /= 10 ** 2;
 346 |     |                 result += 2;
 347 |     |             }
 348 |     |             if (value >= 10 ** 1) {
 349 |     |                 result += 1;
 350 |     |             }
 351 |     |         }
 352 |     |         return result;
 353 |     |     }
 354 |     | 
 355 |     |     /**
 356 |     |      * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
 357 |     |      * Returns 0 if given 0.
 358 |     |      */
 359 |     |     function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
 360 |     |         unchecked {
 361 |     |             uint256 result = log10(value);
 362 |     |             return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);
 363 |     |         }
 364 |     |     }
 365 |     | 
 366 |     |     /**
 367 |     |      * @dev Return the log in base 256 of a positive value rounded towards zero.
 368 |     |      * Returns 0 if given 0.
 369 |     |      *
 370 |     |      * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
 371 |     |      */
 372 |     |     function log256(uint256 value) internal pure returns (uint256) {
 373 |     |         uint256 result = 0;
 374 |     |         unchecked {
 375 |     |             if (value >> 128 > 0) {
 376 |     |                 value >>= 128;
 377 |     |                 result += 16;
 378 |     |             }
 379 |     |             if (value >> 64 > 0) {
 380 |     |                 value >>= 64;
 381 |     |                 result += 8;
 382 |     |             }
 383 |     |             if (value >> 32 > 0) {
 384 |     |                 value >>= 32;
 385 |     |                 result += 4;
 386 |     |             }
 387 |     |             if (value >> 16 > 0) {
 388 |     |                 value >>= 16;
 389 |     |                 result += 2;
 390 |     |             }
 391 |     |             if (value >> 8 > 0) {
 392 |     |                 result += 1;
 393 |     |             }
 394 |     |         }
 395 |     |         return result;
 396 |     |     }
 397 |     | 
 398 |     |     /**
 399 |     |      * @dev Return the log in base 256, following the selected rounding direction, of a positive value.
 400 |     |      * Returns 0 if given 0.
 401 |     |      */
 402 |     |     function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
 403 |     |         unchecked {
 404 |     |             uint256 result = log256(value);
 405 |     |             return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);
 406 |     |         }
 407 |     |     }
 408 |     | 
 409 |     |     /**
 410 |     |      * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.
 411 |     |      */
 412 |     |     function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {
 413 |     |         return uint8(rounding) % 2 == 1;
 414 |     |     }
 415 |     | }
 416 |     | 

/code/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.20;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Standard signed math utilities missing in the Solidity language.
  8 |     |  */
  9 |     | library SignedMath {
 10 |     |     /**
 11 |     |      * @dev Returns the largest of two signed numbers.
 12 |     |      */
 13 |     |     function max(int256 a, int256 b) internal pure returns (int256) {
 14 |     |         return a > b ? a : b;
 15 |     |     }
 16 |     | 
 17 |     |     /**
 18 |     |      * @dev Returns the smallest of two signed numbers.
 19 |     |      */
 20 |     |     function min(int256 a, int256 b) internal pure returns (int256) {
 21 |     |         return a < b ? a : b;
 22 |     |     }
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the average of two signed numbers without overflow.
 26 |     |      * The result is rounded towards zero.
 27 |     |      */
 28 |     |     function average(int256 a, int256 b) internal pure returns (int256) {
 29 |     |         // Formula from the book "Hacker's Delight"
 30 |     |         int256 x = (a & b) + ((a ^ b) >> 1);
 31 |     |         return x + (int256(uint256(x) >> 255) & (a ^ b));
 32 |     |     }
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Returns the absolute unsigned value of a signed value.
 36 |     |      */
 37 |     |     function abs(int256 n) internal pure returns (uint256) {
 38 |     |         unchecked {
 39 |     |             // must be unchecked in order to support `n = type(int256).min`
 40 |     |             return uint256(n >= 0 ? n : -n);
 41 |     |         }
 42 |     |     }
 43 |     | }
 44 |     | 

/code/test/echidna/Echidna_SpokeYieldVaultProps.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.24;
   3 |     | 
   4 |     | import {SpokeYieldVault} from "contracts/spoke/SpokeYieldVault.sol";
   5 |     | import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
   6 |     | import {SuperchainERC20} from "contracts/tokens/SuperchainERC20.sol";
   7 |     | import {AdapterRegistry} from "contracts/strategy/AdapterRegistry.sol";
   8 |     | 
   9 |     | // Minimal ERC20 implementation for underlying asset compatible with ERC4626
  10 | *   | contract ERC20MiniFull {
  11 | *   |     string public name = "Asset";
  12 | *   |     string public symbol = "AST";
  13 | *   |     uint8 public immutable decimals = 18;
  14 |     |     uint256 public totalSupply;
  15 | *   |     mapping(address => uint256) public balanceOf;
  16 |     |     mapping(address => mapping(address => uint256)) public allowance;
  17 |     | 
  18 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
  19 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
  20 |     | 
  21 |     |     function approve(address spender, uint256 value) external returns (bool) {
  22 | *   |         allowance[msg.sender][spender] = value;
  23 | *   |         emit Approval(msg.sender, spender, value);
  24 |     |         return true;
  25 |     |     }
  26 |     | 
  27 |     |     function transfer(address to, uint256 value) external returns (bool) {
  28 | *   |         _transfer(msg.sender, to, value);
  29 |     |         return true;
  30 |     |     }
  31 |     | 
  32 |     |     function transferFrom(address from, address to, uint256 value) external returns (bool) {
  33 | *   |         uint256 a = allowance[from][msg.sender];
  34 | *   |         require(a >= value, "ALLOW");
  35 |     |         unchecked { allowance[from][msg.sender] = a - value; }
  36 | *   |         _transfer(from, to, value);
  37 |     |         return true;
  38 |     |     }
  39 |     | 
  40 | *   |     function _transfer(address from, address to, uint256 value) internal {
  41 | *   |         require(balanceOf[from] >= value, "BAL");
  42 |     |         unchecked { balanceOf[from] -= value; balanceOf[to] += value; }
  43 | *   |         emit Transfer(from, to, value);
  44 |     |     }
  45 |     | 
  46 |     |     function mint(address to, uint256 value) external {
  47 | *   |         totalSupply += value;
  48 | *   |         balanceOf[to] += value;
  49 | *   |         emit Transfer(address(0), to, value);
  50 |     |     }
  51 |     | 
  52 |     |     function burn(address from, uint256 value) external {
  53 |     |         require(balanceOf[from] >= value, "BAL");
  54 |     |         unchecked { balanceOf[from] -= value; totalSupply -= value; }
  55 |     |         emit Transfer(from, address(0), value);
  56 |     |     }
  57 |     | }
  58 |     | 
  59 |     | // Echidna harness for SpokeYieldVault
  60 | *r  | contract Echidna_SpokeYieldVaultProps {
  61 |     |     SpokeYieldVault public vault;
  62 |     |     ERC20MiniFull public asset;
  63 | *   |     SuperchainERC20 public lst;
  64 |     |     AdapterRegistry public registry;
  65 |     | 
  66 |     |     constructor() {
  67 | *   |         asset = new ERC20MiniFull();
  68 | *   |         lst = new SuperchainERC20("LST", "LST");
  69 | *   |         registry = new AdapterRegistry();
  70 | *   |         registry.initialize(address(this));
  71 |     | 
  72 | *   |         vault = new SpokeYieldVault();
  73 | *   |         vault.initialize(
  74 |     |             IERC20(address(asset)),
  75 |     |             "Spoke Vault",
  76 |     |             "SV",
  77 |     |             address(this), // hub
  78 |     |             address(this), // governor
  79 |     |             address(this), // rebalancer
  80 |     |             address(registry),
  81 |     |             address(this), // feeRecipient
  82 |     |             0, // performanceFeeBps
  83 |     |             address(lst)
  84 |     |         );
  85 |     |         // Allow vault to mint/burn LST
  86 | *   |         lst.grantMinter(address(vault));
  87 |     |     }
  88 |     | 
  89 |     |     // Helpers for Echidna to move tokens/approve
  90 |     |     function gift(uint256 amt) public {
  91 | *   |         uint256 a = amt % (1_000_000 ether);
  92 | *   |         asset.mint(msg.sender, a);
  93 |     |         // approve large allowance for vault
  94 |     |         // use max to keep approvals sticky
  95 | *   |         asset.approve(address(vault), type(uint256).max);
  96 |     |     }
  97 |     | 
  98 |     |     function deposit(uint256 amt) public {
  99 | *   |         uint256 a = amt % (100_000 ether);
 100 | *   |         try vault.deposit(a, msg.sender) { } catch { }
 101 |     |     }
 102 |     | 
 103 |     |     function redeem(uint256 shares) public {
 104 | *   |         uint256 s = shares % (100_000 ether);
 105 | *   |         try vault.redeem(s, msg.sender, msg.sender) { } catch { }
 106 |     |     }
 107 |     | 
 108 |     |     // Governor wrappers
 109 |     |     function setFlags(bool d, bool b, bool br) public {
 110 |     |         // governor-only; harness is governor
 111 | *   |         try vault.setFlags(d, b, br) { } catch { }
 112 |     |     }
 113 |     | 
 114 |     |     function setWithdrawalBufferBps(uint16 bps) public {
 115 | *   |         try vault.setWithdrawalBufferBps(bps) { } catch { }
 116 |     |     }
 117 |     | 
 118 |     |     function setEpochOutflowConfig(uint16 capBps, uint64 len) public {
 119 | *   |         try vault.setEpochOutflowConfig(capBps, len) { } catch { }
 120 |     |     }
 121 |     | 
 122 |     |     // Properties
 123 |     |     function echidna_buffer_bps_valid() public view returns (bool) {
 124 | *   |         return vault.withdrawalBufferBps() <= 10_000;
 125 |     |     }
 126 |     | 
 127 |     |     function echidna_epoch_cap_bps_valid() public view returns (bool) {
 128 | *   |         return vault.epochOutflowCapBps() <= 10_000;
 129 |     |     }
 130 |     | 
 131 |     |     function echidna_deposit_respects_flag() public returns (bool) {
 132 |     |         // disable deposits; attempt to deposit; expect no successful increase
 133 |     |         // snapshot supplies
 134 | *   |         uint256 beforeShares = vault.balanceOf(address(this));
 135 |     |         try vault.setFlags(false, false, true) { } catch { }
 136 |     |         // try to deposit from harness
 137 |     |         try vault.deposit(1 ether, address(this)) { } catch { }
 138 |     |         // re-enable for future sequences
 139 |     |         try vault.setFlags(true, false, true) { } catch { }
 140 |     |         // if shares increased while deposits disabled, fail
 141 |     |         return vault.balanceOf(address(this)) <= beforeShares;
 142 |     |     }
 143 |     | }
 144 |     | 

