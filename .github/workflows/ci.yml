name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  spec-compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Build
        run: forge build
      - name: Run SpecCompliance test only
        run: forge test -vvv --match-path test/spec/SpecCompliance.t.sol

  test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Install deps
        run: |
          forge --version
          forge install --no-commit
      - name: Build
        run: forge build
      - name: Run tests
        run: forge test -vvv
      - name: Coverage (summary) and export artifacts
        run: |
          mkdir -p artifacts/coverage
          forge coverage --report lcov > artifacts/coverage/lcov.info
          forge coverage --report summary | tee artifacts/coverage/summary.txt
      - name: Enforce coverage thresholds (contracts only)
        env:
          MIN_LINES: "90"
          MIN_BRANCHES: "60"  # TODO: raise progressively to 90
          MIN_FUNCTIONS: "80"  # TODO: raise progressively to 90
          MIN_STATEMENTS: "90"
        run: |
          python3 - << 'PY'
          import re, sys, os
          p_summary = 'artifacts/coverage/summary.txt'
          with open(p_summary,'r') as f:
              lines = f.readlines()
          # Accumulators for contracts/* rows only
          metrics = {
              'lines': {'cov':0, 'tot':0},
              'statements': {'cov':0, 'tot':0},
              'branches': {'cov':0, 'tot':0},
              'functions': {'cov':0, 'tot':0},
          }
          row_re = re.compile(r"^\|\s*(?P<file>[^|]+)\|\s*([0-9.]+%\s*\((?P<l_cov>\d+)/(\d+)\))\s*\|\s*([0-9.]+%\s*\((?P<s_cov>\d+)/(\d+)\))\s*\|\s*([0-9.]+%\s*\((?P<b_cov>\d+)/(\d+)\))\s*\|\s*([0-9.]+%\s*\((?P<f_cov>\d+)/(\d+)\))")
          for ln in lines:
              m = row_re.match(ln)
              if not m: continue
              file = m.group('file').strip()
              if not file.startswith('contracts/'):
                  continue
              metrics['lines']['cov'] += int(m.group('l_cov'))
              metrics['lines']['tot'] += int(m.group(4))
              metrics['statements']['cov'] += int(m.group('s_cov'))
              metrics['statements']['tot'] += int(m.group(7))
              metrics['branches']['cov'] += int(m.group('b_cov'))
              metrics['branches']['tot'] += int(m.group(10))
              metrics['functions']['cov'] += int(m.group('f_cov'))
              metrics['functions']['tot'] += int(m.group(13))
          def pct(c,t):
              return 100.0 if t==0 else (100.0* c / t)
          results = {k: pct(v['cov'], v['tot']) for k,v in metrics.items()}
          print('Contracts-only coverage:', results)
          mins = {
              'lines': float(os.environ.get('MIN_LINES','90')),
              'branches': float(os.environ.get('MIN_BRANCHES','90')),
              'functions': float(os.environ.get('MIN_FUNCTIONS','90')),
              'statements': float(os.environ.get('MIN_STATEMENTS','90')),
          }
          fails = [k for k,v in results.items() if v < mins[k]]
          if fails:
              print('Coverage below thresholds for:', fails)
              sys.exit(1)
          PY
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: |
            artifacts/coverage/lcov.info
            artifacts/coverage/summary.txt
      - name: Gas snapshot
        run: |
          forge snapshot
          mkdir -p artifacts/gas
          cp .gas-snapshot artifacts/gas/gas-snapshot.txt || true
      - name: Upload gas artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gas-artifacts
          path: artifacts/gas/gas-snapshot.txt

  slither:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Slither
        run: |
          pip install slither-analyzer solc-select
          solc-select install 0.8.24
          solc-select use 0.8.24
      - name: Run Slither
        run: |
          slither . --config-file .slither.json --filter-paths test/ --exclude-dependencies --ignore-compile --fail-high --fail-medium

  sim-export:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Build
        run: forge build
      - name: Run sim CSV exporter
        run: forge test --match-path test/sim/ExportScenarios.t.sol -vv
      - name: Upload sim CSV
        uses: actions/upload-artifact@v4
        with:
          name: sim-csv
          path: |
            artifacts/econsec/sim-results.csv
            artifacts/econsec/sim-sweep.csv
